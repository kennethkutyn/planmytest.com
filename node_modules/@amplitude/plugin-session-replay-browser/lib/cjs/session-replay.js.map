{"version":3,"file":"session-replay.js","sourceRoot":"","sources":["../../src/session-replay.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserClient, BrowserConfig, EnrichmentPlugin, Event, SpecialEventType } from '@amplitude/analytics-core';\nimport {\n  init,\n  setSessionId,\n  getSessionId,\n  getSessionReplayProperties,\n  flush,\n  shutdown,\n  evaluateTargetingAndCapture,\n  AmplitudeSessionReplay,\n  SessionReplayOptions as SessionReplayBrowserOptions,\n} from '@amplitude/session-replay-browser';\nimport { getAnalyticsConnector } from '@amplitude/analytics-client-common';\nimport { parseUserProperties } from './helpers';\nimport { SessionReplayOptions } from './typings/session-replay';\nimport { VERSION } from './version';\n\nexport class SessionReplayPlugin implements EnrichmentPlugin<BrowserClient, BrowserConfig> {\n  static pluginName = '@amplitude/plugin-session-replay-browser';\n  name = SessionReplayPlugin.pluginName;\n  type = 'enrichment' as const;\n  // this.config is defined in setup() which will always be called first\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  config: BrowserConfig;\n  options: SessionReplayOptions;\n  srInitOptions: SessionReplayBrowserOptions;\n  sessionReplay: AmplitudeSessionReplay = {\n    flush: flush,\n    getSessionId: getSessionId,\n    getSessionReplayProperties: getSessionReplayProperties,\n    init: init,\n    setSessionId: setSessionId,\n    shutdown: shutdown,\n    evaluateTargetingAndCapture: evaluateTargetingAndCapture,\n  };\n\n  constructor(options?: SessionReplayOptions) {\n    this.options = { forceSessionTracking: false, ...options };\n    this.srInitOptions = this.options;\n  }\n\n  async setup(config: BrowserConfig, _client: BrowserClient) {\n    try {\n      /* istanbul ignore next */\n      config?.loggerProvider.log(`Installing @amplitude/plugin-session-replay, version ${VERSION}.`);\n\n      this.config = config;\n\n      if (this.options.forceSessionTracking) {\n        if (typeof config.defaultTracking === 'boolean') {\n          if (config.defaultTracking === false) {\n            config.defaultTracking = {\n              pageViews: false,\n              formInteractions: false,\n              fileDownloads: false,\n              sessions: true,\n            };\n          }\n        } else {\n          config.defaultTracking = {\n            ...config.defaultTracking,\n            sessions: true,\n          };\n        }\n      }\n      const identityStore = getAnalyticsConnector(this.config.instanceName).identityStore;\n      const userProperties = identityStore.getIdentity().userProperties;\n\n      this.srInitOptions = {\n        instanceName: this.config.instanceName,\n        deviceId: this.options.deviceId ?? this.config.deviceId,\n        optOut: this.config.optOut,\n        sessionId: this.options.customSessionId ? undefined : this.config.sessionId,\n        loggerProvider: this.config.loggerProvider,\n        logLevel: this.config.logLevel,\n        flushMaxRetries: this.config.flushMaxRetries,\n        serverZone: this.config.serverZone,\n        configServerUrl: this.options.configServerUrl,\n        trackServerUrl: this.options.trackServerUrl,\n        sampleRate: this.options.sampleRate,\n        privacyConfig: {\n          blockSelector: this.options.privacyConfig?.blockSelector,\n          maskSelector: this.options.privacyConfig?.maskSelector,\n          unmaskSelector: this.options.privacyConfig?.unmaskSelector,\n          defaultMaskLevel: this.options.privacyConfig?.defaultMaskLevel,\n        },\n        debugMode: this.options.debugMode,\n        shouldInlineStylesheet: this.options.shouldInlineStylesheet,\n        version: { type: 'plugin', version: VERSION },\n        performanceConfig: this.options.performanceConfig,\n        storeType: this.options.storeType,\n        experimental: this.options.experimental,\n        userProperties: userProperties,\n        omitElementTags: this.options.omitElementTags,\n        applyBackgroundColorToBlockedElements: this.options.applyBackgroundColorToBlockedElements,\n        interactionConfig: this.options.interactionConfig,\n        captureDocumentTitle: this.options.captureDocumentTitle,\n        enableUrlChangePolling: this.options.enableUrlChangePolling,\n        urlChangePollingInterval: this.options.urlChangePollingInterval,\n      };\n\n      await this.sessionReplay.init(config.apiKey, this.srInitOptions).promise;\n    } catch (error) {\n      /* istanbul ignore next */\n      config?.loggerProvider.error(`Session Replay: Failed to initialize due to ${(error as Error).message}`);\n    }\n  }\n\n  async onSessionIdChanged(sessionId: number): Promise<void> {\n    this.config.loggerProvider.debug(\n      `Analytics session id is changed to ${sessionId}, SR session id is ${String(this.sessionReplay.getSessionId())}.`,\n    );\n    await this.sessionReplay.setSessionId(sessionId).promise;\n  }\n\n  async onOptOutChanged(optOut: boolean): Promise<void> {\n    this.config.loggerProvider.debug(\n      `optOut is changed to ${String(optOut)}, calling ${\n        optOut ? 'sessionReplay.shutdown()' : 'sessionReplay.init()'\n      }.`,\n    );\n    // TODO: compare optOut with this.sessionReplay.getOptOut().\n    // Need to add getOptOut() to the interface AmplitudeSessionReplay first.\n    if (optOut) {\n      this.sessionReplay.shutdown();\n    } else {\n      await this.sessionReplay.init(this.config.apiKey, this.srInitOptions).promise;\n    }\n  }\n\n  async execute(event: Event) {\n    try {\n      if (this.options.customSessionId) {\n        const sessionId = this.options.customSessionId(event);\n        if (sessionId) {\n          // On event, synchronize the session id to the custom session id from the event. This may\n          // suffer from offline/delayed events messing up the state stored\n          if (sessionId !== this.sessionReplay.getSessionId()) {\n            await this.sessionReplay.setSessionId(sessionId).promise;\n          }\n\n          const sessionRecordingProperties = this.sessionReplay.getSessionReplayProperties();\n          event.event_properties = {\n            ...event.event_properties,\n            ...sessionRecordingProperties,\n          };\n        }\n      } else {\n        // On event, synchronize the session id to the what's on the browserConfig (source of truth)\n        // Choosing not to read from event object here, concerned about offline/delayed events messing up the state stored\n        // in SR.\n        const sessionId: string | number | undefined = this.config.sessionId;\n        if (sessionId && sessionId !== this.sessionReplay.getSessionId()) {\n          await this.sessionReplay.setSessionId(sessionId).promise;\n        }\n\n        // Treating config.sessionId as source of truth, if the event's session id doesn't match, the\n        // event is not of the current session (offline/late events). In that case, don't tag the events\n        if (sessionId && sessionId === event.session_id) {\n          let userProperties;\n          if (event.event_type === SpecialEventType.IDENTIFY) {\n            userProperties = parseUserProperties(event);\n          }\n          await this.sessionReplay.evaluateTargetingAndCapture({ event, userProperties });\n          const sessionRecordingProperties = this.sessionReplay.getSessionReplayProperties();\n          event.event_properties = {\n            ...event.event_properties,\n            ...sessionRecordingProperties,\n          };\n        }\n      }\n\n      return Promise.resolve(event);\n    } catch (error) {\n      /* istanbul ignore next */\n      this.config?.loggerProvider.error(`Session Replay: Failed to enrich event due to ${(error as Error).message}`);\n      return Promise.resolve(event);\n    }\n  }\n\n  async teardown(): Promise<void> {\n    try {\n      this.sessionReplay.shutdown();\n      // the following are initialized in setup() which will always be called first\n      // here we reset them to null to prevent memory leaks\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.config = null;\n    } catch (error) {\n      /* istanbul ignore next */\n      this.config?.loggerProvider.error(`Session Replay: teardown failed due to ${(error as Error).message}`);\n    }\n  }\n\n  getSessionReplayProperties() {\n    return this.sessionReplay.getSessionReplayProperties();\n  }\n}\n\nexport const sessionReplayPlugin: (options?: SessionReplayOptions) => EnrichmentPlugin = (\n  options?: SessionReplayOptions,\n) => {\n  return new SessionReplayPlugin(options);\n};\n"]}