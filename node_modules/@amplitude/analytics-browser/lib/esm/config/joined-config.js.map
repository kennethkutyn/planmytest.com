{"version":3,"file":"joined-config.js","sourceRoot":"","sources":["../../../src/config/joined-config.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AutocaptureOptions,\n  type ElementInteractionsOptions,\n  BrowserConfig,\n  RemoteConfig,\n} from '@amplitude/analytics-core';\n\nexport interface AutocaptureOptionsRemoteConfig extends AutocaptureOptions {\n  elementInteractions?: boolean | ElementInteractionsOptionsRemoteConfig;\n}\nexport interface ElementInteractionsOptionsRemoteConfig extends ElementInteractionsOptions {\n  /**\n   * Related to pageUrlAllowlist but holds regex strings which will be initialized and appended to pageUrlAllowlist\n   */\n  pageUrlAllowlistRegex?: string[];\n}\n\n// Type alias for the remote config structure we expect (this is what comes from the filtered browserSDK config)\ntype RemoteConfigBrowserSDK = {\n  autocapture?: AutocaptureOptionsRemoteConfig | boolean;\n};\n\n/**\n * Performs a deep transformation of a remote config object so that\n * it matches the expected schema of the local config.\n *\n * Specifically, it normalizes nested `enabled` flags into concise union types.\n *\n * ### Transformation Rules:\n * - If an object has `enabled: true`, it is replaced by the same object without the `enabled` field.\n * - If it has only `enabled: true`, it is replaced with `true`.\n * - If it has `enabled: false`, it is replaced with `false` regardless of other fields.\n *\n * ### Examples:\n * Input:  { prop: { enabled: true, hello: 'world' }}\n * Output: { prop: { hello: 'world' } }\n *\n * Input:  { prop: { enabled: true }}\n * Output: { prop: true }\n *\n * Input:  { prop: { enabled: false, hello: 'world' }}\n * Output: { prop: false }\n *\n * Input:  { prop: { hello: 'world' }}\n * Output: { prop: { hello: 'world' } } // No change\n *\n * @param config Remote config object to be transformed\n * @returns Transformed config object compatible with local schema\n */\nexport function translateRemoteConfigToLocal(config?: Record<string, any>) {\n  // Disabling type checking rules because remote config comes from a remote source\n  // and this function needs to handle any unexpected values\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access,\n     @typescript-eslint/no-unsafe-assignment,\n     @typescript-eslint/no-unsafe-argument\n */\n  if (typeof config !== 'object' || config === null) {\n    return;\n  }\n\n  // translations are not applied on array properties\n  if (Array.isArray(config)) {\n    return;\n  }\n\n  const propertyNames = Object.keys(config);\n  for (const propertyName of propertyNames) {\n    try {\n      const value = config[propertyName];\n      // transform objects with { enabled } property to boolean | object\n      if (typeof value?.enabled === 'boolean') {\n        if (value.enabled) {\n          // if enabled is true, set the value to the rest of the object\n          // or true if the object has no other properties\n          delete value.enabled;\n          if (Object.keys(value).length === 0) {\n            (config as any)[propertyName] = true;\n          }\n        } else {\n          // If enabled is false, set the value to false\n          (config as any)[propertyName] = false;\n        }\n      }\n\n      // recursively translate properties of the value\n      translateRemoteConfigToLocal(value as Record<string, any>);\n    } catch (e) {\n      // a failure here means that an accessor threw an error\n      // so don't translate it\n      // TODO(diagnostics): add a diagnostic event for this\n    }\n  }\n}\n\n/**\n * Updates the browser config in place by applying remote configuration settings.\n * Primarily merges autocapture settings from the remote config into the browser config.\n *\n * @param remoteConfig - The remote configuration to apply, or null if none available\n * @param browserConfig - The browser config object to update (modified in place)\n */\nexport function updateBrowserConfigWithRemoteConfig(\n  remoteConfig: RemoteConfig | null,\n  browserConfig: BrowserConfig,\n): void {\n  if (!remoteConfig) {\n    return;\n  }\n\n  // translate remote config to local compatible format\n  translateRemoteConfigToLocal(remoteConfig);\n\n  try {\n    browserConfig.loggerProvider.debug(\n      'Update browser config with remote configuration:',\n      JSON.stringify(remoteConfig),\n    );\n\n    // type cast error will be thrown if remoteConfig is not a valid RemoteConfigBrowserSDK\n    // and it will be caught by the try-catch block\n    const typedRemoteConfig = remoteConfig as RemoteConfigBrowserSDK;\n\n    // merge remoteConfig.autocapture and browserConfig.autocapture\n    // if a field is in remoteConfig.autocapture, use that value\n    // if a field is not in remoteConfig.autocapture, use the value from browserConfig.autocapture\n    if (typedRemoteConfig && 'autocapture' in typedRemoteConfig) {\n      if (typeof typedRemoteConfig.autocapture === 'boolean') {\n        browserConfig.autocapture = typedRemoteConfig.autocapture;\n      }\n\n      if (typeof typedRemoteConfig.autocapture === 'object' && typedRemoteConfig.autocapture !== null) {\n        const transformedAutocaptureRemoteConfig = { ...typedRemoteConfig.autocapture };\n\n        if (browserConfig.autocapture === undefined) {\n          browserConfig.autocapture = typedRemoteConfig.autocapture;\n        }\n\n        // Handle Element Interactions config initialization\n        if (\n          typeof typedRemoteConfig.autocapture.elementInteractions === 'object' &&\n          typedRemoteConfig.autocapture.elementInteractions !== null &&\n          typedRemoteConfig.autocapture.elementInteractions.pageUrlAllowlistRegex?.length\n        ) {\n          transformedAutocaptureRemoteConfig.elementInteractions = {\n            ...typedRemoteConfig.autocapture.elementInteractions,\n          };\n          const transformedRcElementInteractions = transformedAutocaptureRemoteConfig.elementInteractions;\n\n          const exactAllowList = transformedRcElementInteractions.pageUrlAllowlist ?? [];\n          // Convert string patterns to RegExp objects, warn on invalid patterns and skip them\n          const regexList = [];\n          for (const pattern of typedRemoteConfig.autocapture.elementInteractions.pageUrlAllowlistRegex) {\n            try {\n              regexList.push(new RegExp(pattern));\n            } catch (regexError) {\n              browserConfig.loggerProvider.warn(`Invalid regex pattern: ${pattern}`, regexError);\n            }\n          }\n\n          const combinedPageUrlAllowlist = exactAllowList.concat(regexList);\n\n          transformedRcElementInteractions.pageUrlAllowlist = combinedPageUrlAllowlist;\n          delete transformedRcElementInteractions.pageUrlAllowlistRegex;\n        }\n\n        if (typeof browserConfig.autocapture === 'boolean') {\n          browserConfig.autocapture = {\n            attribution: browserConfig.autocapture,\n            fileDownloads: browserConfig.autocapture,\n            formInteractions: browserConfig.autocapture,\n            pageViews: browserConfig.autocapture,\n            sessions: browserConfig.autocapture,\n            elementInteractions: browserConfig.autocapture,\n            webVitals: browserConfig.autocapture,\n            frustrationInteractions: browserConfig.autocapture,\n            ...transformedAutocaptureRemoteConfig,\n          };\n        }\n\n        if (typeof browserConfig.autocapture === 'object') {\n          browserConfig.autocapture = {\n            ...browserConfig.autocapture,\n            ...transformedAutocaptureRemoteConfig,\n          };\n        }\n      }\n\n      // Override default tracking options if autocapture is updated by remote config\n      browserConfig.defaultTracking = browserConfig.autocapture;\n    }\n\n    browserConfig.loggerProvider.debug('Browser config after remote config update:', JSON.stringify(browserConfig));\n  } catch (e) {\n    browserConfig.loggerProvider.error('Failed to apply remote configuration because of error: ', e);\n  }\n}\n"]}