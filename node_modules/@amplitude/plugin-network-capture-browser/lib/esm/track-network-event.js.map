{"version":3,"file":"track-network-event.js","sourceRoot":"","sources":["../../src/track-network-event.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BrowserClient,\n  NetworkRequestEvent,\n  NetworkCaptureRule,\n  NetworkTrackingOptions,\n  getGlobalScope,\n  JsonObject,\n  isUrlMatchAllowlist,\n  SAFE_HEADERS,\n} from '@amplitude/analytics-core';\nimport { filter } from 'rxjs';\nimport { AllWindowObservables, TimestampedEvent } from './network-capture-plugin';\nimport { AMPLITUDE_NETWORK_REQUEST_EVENT, IS_HEADER_CAPTURE_EXPERIMENTAL } from './constants';\nimport { IRequestWrapper } from '@amplitude/analytics-core';\nimport { BodyCaptureRule } from '@amplitude/analytics-core/lib/esm/types/network-tracking';\n\nconst DEFAULT_STATUS_CODE_RANGE = '500-599';\n\nfunction wildcardMatch(str: string, pattern: string) {\n  // Escape all regex special characters except for *\n  const escapedPattern = pattern.replace(/[-[\\]{}()+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  // Replace * with .*\n  const regexPattern = '^' + escapedPattern.replace(/\\*/g, '.*') + '$';\n  const regex = new RegExp(regexPattern);\n  return regex.test(str);\n}\n\nfunction isStatusCodeInRange(statusCode: number, range: string) {\n  const ranges = range.split(',');\n  for (const r of ranges) {\n    const [start, end] = r.split('-').map(Number);\n    if (statusCode === start && end === undefined) {\n      return true;\n    }\n    if (statusCode >= start && statusCode <= end) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isCaptureRuleMatch(\n  rule: NetworkCaptureRule,\n  hostname: string,\n  status?: number,\n  url?: string,\n  method?: string,\n) {\n  // check if the host is in the allowed hosts\n  if (rule.hosts && !rule.hosts.find((host: string) => wildcardMatch(hostname, host))) {\n    return;\n  }\n\n  // check if the URL is in the allowed URL patterns\n  if (url && rule.urls && !isUrlMatchAllowlist(url, rule.urls)) {\n    return;\n  }\n\n  // check if the method is in the allowed methods\n  if (\n    method &&\n    rule.methods &&\n    !rule.methods.find(\n      (allowedMethod: string) => method.toLowerCase() === allowedMethod.toLowerCase() || allowedMethod === '*',\n    )\n  ) {\n    return;\n  }\n\n  // check if the status code is in the allowed range\n  if (status || status === 0) {\n    const statusCodeRange = rule.statusCodeRange || DEFAULT_STATUS_CODE_RANGE;\n    if (!isStatusCodeInRange(status, statusCodeRange)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction parseUrl(url: string | undefined) {\n  if (!url) {\n    return;\n  }\n  try {\n    /* istanbul ignore next */\n    const currentHref = getGlobalScope()?.location.href;\n    const urlObj = new URL(url, currentHref);\n    const query = urlObj.searchParams.toString();\n    const fragment = urlObj.hash.replace('#', '');\n    const href = urlObj.href;\n    const host = urlObj.host;\n    urlObj.hash = '';\n    urlObj.search = '';\n    const hrefWithoutQueryOrHash = urlObj.href;\n    return { query, fragment, href, hrefWithoutQueryOrHash, host };\n  } catch (e) {\n    /* istanbul ignore next */\n    return;\n  }\n}\n\nfunction isAmplitudeNetworkRequestEvent(host: string, requestWrapper: IRequestWrapper): boolean {\n  if (host.includes('amplitude.com')) {\n    try {\n      const body = requestWrapper.body;\n      if (typeof body !== 'string') {\n        return false;\n      }\n      const bodyObj = JSON.parse(body) as { events: any[] };\n      const { events } = bodyObj;\n      /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */\n      if (events.find((event: any) => event.event_type === AMPLITUDE_NETWORK_REQUEST_EVENT)) {\n        return true;\n      }\n    } catch (e) {\n      // do nothing\n    }\n  }\n  return false;\n}\n\n/**\n * Takes a user provided header capture rule and returns a\n * HeaderCaptureRule object that sets proper default values.\n *\n * @param rule - The header capture rule to parse.\n * @returns A HeaderCaptureRule object.\n */\nexport function parseHeaderCaptureRule(rule: string[] | boolean | undefined | null): string[] | undefined {\n  if (typeof rule !== 'object' || rule === null) {\n    // if rule is truthy or undefined, return SAFE_HEADERS\n    if (rule) {\n      return [...SAFE_HEADERS];\n    } else if (rule === undefined) {\n      /* istanbul ignore next */\n      const res = IS_HEADER_CAPTURE_EXPERIMENTAL ? undefined : [...SAFE_HEADERS];\n      return res;\n    }\n    return;\n  }\n\n  // if the rule is defined but empty, return undefined\n  if (rule.length === 0) {\n    return;\n  }\n\n  return rule;\n}\n\nfunction isBodyCaptureRuleEmpty(rule: BodyCaptureRule) {\n  /* istanbul ignore next */\n  return !rule?.allowlist?.length && !rule?.blocklist?.length;\n}\n\nexport function shouldTrackNetworkEvent(networkEvent: NetworkRequestEvent, options: NetworkTrackingOptions = {}) {\n  const urlObj = parseUrl(networkEvent.url);\n  /* istanbul ignore if */\n  if (!urlObj) {\n    // if the URL failed to parse, do not track the event\n    // this is a probably impossible case that would only happen if the URL is malformed\n    /* istanbul ignore next */\n    return false;\n  }\n  const { host } = urlObj;\n\n  // false if is amplitude request and not configured to track amplitude requests\n  if (\n    options.ignoreAmplitudeRequests !== false &&\n    (wildcardMatch(host, '*.amplitude.com') || wildcardMatch(host, 'amplitude.com'))\n  ) {\n    return false;\n  }\n\n  // false if the host is in the ignore list\n  if (options.ignoreHosts?.find((ignoreHost: string) => wildcardMatch(host, ignoreHost))) {\n    return false;\n  }\n\n  // false if the status code is not 500-599 and there are no captureRules\n  if (\n    !options.captureRules &&\n    networkEvent.status !== undefined &&\n    !isStatusCodeInRange(networkEvent.status, DEFAULT_STATUS_CODE_RANGE)\n  ) {\n    return false;\n  }\n\n  if (options.captureRules) {\n    // find the first capture rule, in reverse-order,\n    // that is a match (true) or a miss (false)\n    let isMatch: boolean | undefined;\n    [...options.captureRules].reverse().find((rule) => {\n      isMatch = isCaptureRuleMatch(rule, host, networkEvent.status, networkEvent.url, networkEvent.method);\n\n      if (isMatch) {\n        const responseHeadersRule = parseHeaderCaptureRule(rule.responseHeaders);\n        if (networkEvent.responseWrapper && responseHeadersRule) {\n          const responseHeaders = networkEvent.responseWrapper.headers(responseHeadersRule);\n          if (responseHeaders) {\n            networkEvent.responseHeaders = responseHeaders;\n          }\n        }\n\n        // if requestHeaders rule is specified, enrich the event with the request headers\n        const requestHeadersRule = parseHeaderCaptureRule(rule.requestHeaders);\n        if (networkEvent.requestWrapper && requestHeadersRule) {\n          const requestHeaders = networkEvent.requestWrapper.headers(requestHeadersRule);\n          if (requestHeaders) {\n            networkEvent.requestHeaders = requestHeaders;\n          }\n        }\n\n        // if responseBody rule is specified, enrich the event with the response body\n        if (networkEvent.responseWrapper && rule.responseBody && !isBodyCaptureRuleEmpty(rule.responseBody)) {\n          networkEvent.responseBodyJson = networkEvent.responseWrapper.json(\n            rule.responseBody.allowlist,\n            rule.responseBody.blocklist,\n          );\n        }\n\n        // if requestBody rule is specified, enrich the event with the request body\n        if (networkEvent.requestWrapper && rule.requestBody && !isBodyCaptureRuleEmpty(rule.requestBody)) {\n          networkEvent.requestBodyJson = networkEvent.requestWrapper.json(\n            rule.requestBody.allowlist,\n            rule.requestBody.blocklist,\n          );\n        }\n      }\n\n      return isMatch !== undefined;\n    });\n\n    // if we found a miss (false) or no match (undefined),\n    // then do not track the event\n    if (!isMatch) {\n      return false;\n    }\n  }\n\n  // skip Amplitude network requests to \"[Amplitude] Network Request\" to avoid infinite loop\n  if (networkEvent.requestWrapper && isAmplitudeNetworkRequestEvent(host, networkEvent.requestWrapper)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport type NetworkAnalyticsEvent = {\n  ['[Amplitude] URL']: string;\n  ['[Amplitude] URL Query']?: string;\n  ['[Amplitude] URL Fragment']?: string;\n  ['[Amplitude] Request Method']: string;\n  ['[Amplitude] Status Code']?: number;\n  ['[Amplitude] Start Time']?: number; // unix timestamp\n  ['[Amplitude] Completion Time']?: number; // unix timestamp\n  ['[Amplitude] Duration']?: number; // completionTime - startTime (millis)\n  ['[Amplitude] Request Body Size']?: number;\n  ['[Amplitude] Request Headers']?: Record<string, string>;\n  ['[Amplitude] Request Body']?: JsonObject;\n  ['[Amplitude] Response Body Size']?: number;\n  ['[Amplitude] Response Headers']?: Record<string, string>;\n  ['[Amplitude] Response Body']?: JsonObject;\n  ['[Amplitude] Request Type']?: 'xhr' | 'fetch';\n};\n\nexport async function logNetworkAnalyticsEvent(\n  networkAnalyticsEvent: NetworkAnalyticsEvent,\n  request: NetworkRequestEvent,\n  amplitude: BrowserClient,\n) {\n  if (request.requestBodyJson || request.responseBodyJson) {\n    const [requestBody, responseBody] = await Promise.all([request.requestBodyJson, request.responseBodyJson]);\n    if (requestBody) {\n      networkAnalyticsEvent['[Amplitude] Request Body'] = requestBody;\n    }\n    if (responseBody) {\n      networkAnalyticsEvent['[Amplitude] Response Body'] = responseBody;\n    }\n  }\n  /* istanbul ignore next */\n  amplitude?.track(AMPLITUDE_NETWORK_REQUEST_EVENT, networkAnalyticsEvent);\n}\n\nexport function trackNetworkEvents({\n  allObservables,\n  networkTrackingOptions,\n  amplitude,\n}: {\n  allObservables: AllWindowObservables;\n  networkTrackingOptions: NetworkTrackingOptions;\n  amplitude: BrowserClient;\n}) {\n  const { networkObservable } = allObservables;\n\n  const filteredNetworkObservable = networkObservable.pipe(\n    filter((event: TimestampedEvent<NetworkRequestEvent>) => {\n      // Only track network events that should be tracked,\n      return shouldTrackNetworkEvent(event.event as NetworkRequestEvent, networkTrackingOptions);\n    }),\n  );\n\n  return filteredNetworkObservable.subscribe((networkEvent) => {\n    const request = networkEvent.event;\n\n    // convert to NetworkAnalyticsEvent\n    const urlObj = parseUrl(request.url);\n    /* istanbul ignore if */\n    if (!urlObj) {\n      // if the URL failed to parse, do not track the event\n      // this is a very unlikely case, because URL() shouldn't throw an exception\n      // when the URL is a valid URL\n      /* istanbul ignore next */\n      return;\n    }\n\n    const responseBodySize = request.responseWrapper?.bodySize;\n    /* istanbul ignore next */\n    const requestBodySize = request.requestWrapper?.bodySize;\n\n    const networkAnalyticsEvent: NetworkAnalyticsEvent = {\n      ['[Amplitude] URL']: urlObj.hrefWithoutQueryOrHash,\n      ['[Amplitude] URL Query']: urlObj.query,\n      ['[Amplitude] URL Fragment']: urlObj.fragment,\n      ['[Amplitude] Request Method']: request.method,\n      ['[Amplitude] Status Code']: request.status,\n      ['[Amplitude] Start Time']: request.startTime,\n      ['[Amplitude] Completion Time']: request.endTime,\n      ['[Amplitude] Duration']: request.duration,\n      ['[Amplitude] Request Body Size']: requestBodySize,\n      ['[Amplitude] Response Body Size']: responseBodySize,\n      ['[Amplitude] Request Type']: request.type,\n      ['[Amplitude] Request Headers']: request.requestHeaders,\n      ['[Amplitude] Response Headers']: request.responseHeaders,\n    };\n\n    // fire-and-forget promise that tracks the event\n    void logNetworkAnalyticsEvent(networkAnalyticsEvent, request, amplitude);\n  });\n}\n"]}