import type { Trigger } from '@amplitude/analytics-core/lib/esm/types/element-interactions';
import type { ElementInteractionsOptions, LabeledEvent } from '@amplitude/analytics-core/lib/esm/types/element-interactions';
import type { ElementBasedTimestampedEvent, ElementBasedEvent } from 'src/helpers';
import type { DataExtractor } from '../data-extractor';
export declare const groupLabeledEventIdsByEventType: (labeledEvents: LabeledEvent[] | null | undefined) => Record<string, Set<string>>;
export declare const createLabeledEventToTriggerMap: (triggers: Trigger[]) => Map<string, Trigger[]>;
/**
 * Matches an event to labeled events based on the event's properties.
 * The logic matches exactly what is supported by the query backend.
 * TODO: later pre-filter the labeled events based on URL first
 *
 * @param event - The event to match against labeled events
 * @param labeledEvents - Array of labeled events to match against
 * @returns Array of matching labeled events
 */
export declare const matchEventToLabeledEvents: (event: ElementBasedTimestampedEvent<ElementBasedEvent>, labeledEvents: LabeledEvent[]) => LabeledEvent[];
export declare const matchLabeledEventsToTriggers: (labeledEvents: LabeledEvent[], leToTriggerMap: Map<string, Trigger[]>) => Trigger[];
export declare class TriggerEvaluator {
    private groupedLabeledEvents;
    private labeledEventToTriggerMap;
    private dataExtractor;
    private options;
    constructor(groupedLabeledEvents: ReturnType<typeof groupLabeledEventIdsByEventType>, labeledEventToTriggerMap: ReturnType<typeof createLabeledEventToTriggerMap>, dataExtractor: DataExtractor, options: ElementInteractionsOptions);
    evaluate(event: ElementBasedTimestampedEvent<ElementBasedEvent>): ElementBasedTimestampedEvent<ElementBasedEvent>;
    update(groupedLabeledEvents: ReturnType<typeof groupLabeledEventIdsByEventType>, labeledEventToTriggerMap: ReturnType<typeof createLabeledEventToTriggerMap>, options: ElementInteractionsOptions): void;
}
export declare const createTriggerEvaluator: (groupedLabeledEvents: ReturnType<typeof groupLabeledEventIdsByEventType>, labeledEventToTriggerMap: Map<string, Trigger[]>, dataExtractor: DataExtractor, options: ElementInteractionsOptions) => TriggerEvaluator;
//# sourceMappingURL=triggers.d.ts.map