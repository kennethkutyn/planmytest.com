{"version":3,"file":"track-dead-click.js","sourceRoot":"","sources":["../../../src/autocapture/track-dead-click.ts"],"names":[],"mappings":";;;;AACA,6BAAsG;AAEtG,sCAAyG;AACzG,0CAAoE;AAEpE,IAAI,kBAAkB,GAAG,IAAI,CAAC,CAAC,8CAA8C;AAE7E,uDAAuD;AACvD,SAAgB,wBAAwB,CAAC,gBAAwB;IAC/D,kBAAkB,GAAG,gBAAgB,CAAC;AACxC,CAAC;AAFD,4DAEC;AAOD,SAAgB,cAAc,CAAC,EAU9B;QATC,SAAS,eAAA,EACT,cAAc,oBAAA,EACd,kBAAkB,wBAAA,EAClB,oBAAoB,0BAAA;IAOZ,IAAA,eAAe,GAA6C,cAAc,gBAA3D,EAAE,kBAAkB,GAAyB,cAAc,mBAAvC,EAAE,kBAAkB,GAAK,cAAc,mBAAnB,CAAoB;IAEnF,IAAM,uBAAuB,GAAG,eAAe,CAAC,IAAI,CAClD,IAAA,aAAM,EAAC,qCAA2B,CAAC,EACnC,IAAA,aAAM,EAAC,UAAC,UAAU;QAChB,uDAAuD;QACvD,OAAO,oBAAoB,CAAC,OAAO,EAAE,UAAU,CAAC,sBAAsB,CAAC,CAAC;IAC1E,CAAC,CAAC,CACH,CAAC;IAEF,IAAM,iBAAiB,GAEnB,CAAC,kBAAkB,CAAC,CAAC;IACzB,IAAI,kBAAkB,EAAE;QACtB,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KAC5C;IACD,IAAM,kBAAkB,GAAG,YAAK,wDAAI,iBAAiB,UAAC,CAAC;IAEvD,IAAM,YAAY,GAAG,uBAAuB,CAAC,IAAI,CAC/C,IAAA,eAAQ,EAAC,UAAC,KAAK;QACb,wCAAwC;QACxC,IAAI,SAAwC,CAAC;QAC7C,IAAM,KAAK,GAAG,IAAI,iBAAU,CAAe,UAAC,UAAoC;YAC9E,SAAS,GAAG,UAAU,CAAC,cAAM,OAAA,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAtB,CAAsB,EAAE,kBAAkB,CAAC,CAAC;YAEzE,OAAO;gBACL,YAAY,CAAC,SAAS,CAAC,CAAC;YAC1B,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,sDAAsD;QACtD,qDAAqD;QACrD,OAAO,IAAA,WAAI,EACT,KAAK,EACL,kBAAkB,CAAC,IAAI,CACrB,IAAA,WAAI,EAAC,CAAC,CAAC,EACP,IAAA,UAAG,EAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAChB,CACF,CAAC,IAAI,CAAC,IAAA,aAAM,EAAC,UAAC,KAAK,IAAwD,OAAA,KAAK,KAAK,IAAI,EAAd,CAAc,CAAC,CAAC,CAAC;IAC/F,CAAC,CAAC;IACF,kDAAkD;IAClD,IAAA,mBAAY,EAAC,kBAAkB,CAAC,CACjC,CAAC;IAEF,OAAO,YAAY,CAAC,SAAS,CAAC,UAAC,WAAW;QACxC,IAAM,cAAc,GAAmB;YACrC,eAAe,EAAG,WAAW,CAAC,KAAoB,CAAC,OAAO;YAC1D,eAAe,EAAG,WAAW,CAAC,KAAoB,CAAC,OAAO;SAC3D,CAAC;QACF,SAAS,CAAC,KAAK,CACb,gDAAoC,wCAE/B,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,sBAAsB,CAAC,GAC/D,cAAc,GAEnB,EAAE,IAAI,EAAE,WAAW,CAAC,SAAS,EAAE,CAChC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AArED,wCAqEC","sourcesContent":["import { AllWindowObservables, ObservablesEnum } from 'src/autocapture-plugin';\nimport { filter, map, merge, take, mergeMap, race, Observable, Subscriber, throttleTime } from 'rxjs';\nimport { BrowserClient, ActionType } from '@amplitude/analytics-core';\nimport { ElementBasedTimestampedEvent, filterOutNonTrackableEvents, shouldTrackEvent } from '../helpers';\nimport { AMPLITUDE_ELEMENT_DEAD_CLICKED_EVENT } from '../constants';\n\nlet DEAD_CLICK_TIMEOUT = 3000; // 3 seconds to wait for an activity to happen\n\n// allow override of dead click config for testing only\nexport function _overrideDeadClickConfig(deadClickTimeout: number) {\n  DEAD_CLICK_TIMEOUT = deadClickTimeout;\n}\n\ntype EventDeadClick = {\n  '[Amplitude] X': number;\n  '[Amplitude] Y': number;\n};\n\nexport function trackDeadClick({\n  amplitude,\n  allObservables,\n  getEventProperties,\n  shouldTrackDeadClick,\n}: {\n  amplitude: BrowserClient;\n  allObservables: AllWindowObservables;\n  getEventProperties: (actionType: ActionType, element: Element) => Record<string, any>;\n  shouldTrackDeadClick: shouldTrackEvent;\n}) {\n  const { clickObservable, mutationObservable, navigateObservable } = allObservables;\n\n  const filteredClickObservable = clickObservable.pipe(\n    filter(filterOutNonTrackableEvents),\n    filter((clickEvent) => {\n      // Only track change on elements that should be tracked\n      return shouldTrackDeadClick('click', clickEvent.closestTrackedAncestor);\n    }),\n  );\n\n  const changeObservables: Array<\n    AllWindowObservables[ObservablesEnum.MutationObservable] | AllWindowObservables[ObservablesEnum.NavigateObservable]\n  > = [mutationObservable];\n  if (navigateObservable) {\n    changeObservables.push(navigateObservable);\n  }\n  const mutationOrNavigate = merge(...changeObservables);\n\n  const actionClicks = filteredClickObservable.pipe(\n    mergeMap((click) => {\n      // Create a timer that emits after 500ms\n      let timeoutId: ReturnType<typeof setTimeout>;\n      const timer = new Observable<typeof click>((subscriber: Subscriber<typeof click>) => {\n        timeoutId = setTimeout(() => subscriber.next(click), DEAD_CLICK_TIMEOUT);\n\n        return () => {\n          clearTimeout(timeoutId);\n        };\n      });\n\n      // Race between the timer and any mutations/navigation\n      // if the timer wins, the click is dead so we emit it\n      return race(\n        timer,\n        mutationOrNavigate.pipe(\n          take(1),\n          map(() => null),\n        ),\n      ).pipe(filter((value): value is ElementBasedTimestampedEvent<MouseEvent> => value !== null));\n    }),\n    // Only allow one dead click event every 3 seconds\n    throttleTime(DEAD_CLICK_TIMEOUT),\n  );\n\n  return actionClicks.subscribe((actionClick) => {\n    const deadClickEvent: EventDeadClick = {\n      '[Amplitude] X': (actionClick.event as MouseEvent).clientX,\n      '[Amplitude] Y': (actionClick.event as MouseEvent).clientY,\n    };\n    amplitude.track(\n      AMPLITUDE_ELEMENT_DEAD_CLICKED_EVENT,\n      {\n        ...getEventProperties('click', actionClick.closestTrackedAncestor),\n        ...deadClickEvent,\n      },\n      { time: actionClick.timestamp },\n    );\n  });\n}\n"]}