import { __assign } from "tslib";
import { filter, map } from 'rxjs';
import { filterOutNonTrackableEvents } from '../helpers';
import { AMPLITUDE_ELEMENT_RAGE_CLICKED_EVENT } from '../constants';
import { DEFAULT_RAGE_CLICK_THRESHOLD, DEFAULT_RAGE_CLICK_WINDOW_MS, DEFAULT_RAGE_CLICK_OUT_OF_BOUNDS_THRESHOLD, } from '@amplitude/analytics-core';
var RAGE_CLICK_THRESHOLD = DEFAULT_RAGE_CLICK_THRESHOLD;
var RAGE_CLICK_WINDOW_MS = DEFAULT_RAGE_CLICK_WINDOW_MS;
var RAGE_CLICK_OUT_OF_BOUNDS_THRESHOLD = DEFAULT_RAGE_CLICK_OUT_OF_BOUNDS_THRESHOLD;
function addCoordinates(regionBox, click) {
    var _a, _b, _c, _d;
    var _e = click.event, clientX = _e.clientX, clientY = _e.clientY;
    regionBox.yMin = Math.min((_a = regionBox.yMin) !== null && _a !== void 0 ? _a : clientY, clientY);
    regionBox.yMax = Math.max((_b = regionBox.yMax) !== null && _b !== void 0 ? _b : clientY, clientY);
    regionBox.xMin = Math.min((_c = regionBox.xMin) !== null && _c !== void 0 ? _c : clientX, clientX);
    regionBox.xMax = Math.max((_d = regionBox.xMax) !== null && _d !== void 0 ? _d : clientX, clientX);
    regionBox.isOutOfBounds =
        regionBox.yMax - regionBox.yMin > RAGE_CLICK_OUT_OF_BOUNDS_THRESHOLD ||
            regionBox.xMax - regionBox.xMin > RAGE_CLICK_OUT_OF_BOUNDS_THRESHOLD;
}
function getRageClickAnalyticsEvent(clickWindow) {
    var firstClick = clickWindow[0];
    var lastClick = clickWindow[clickWindow.length - 1];
    var rageClickEvent = __assign({ '[Amplitude] Begin Time': new Date(firstClick.timestamp).toISOString(), '[Amplitude] End Time': new Date(lastClick.timestamp).toISOString(), '[Amplitude] Duration': lastClick.timestamp - firstClick.timestamp, '[Amplitude] Clicks': clickWindow.map(function (click) { return ({
            X: click.event.clientX,
            Y: click.event.clientY,
            Time: click.timestamp,
        }); }), '[Amplitude] Click Count': clickWindow.length }, firstClick.targetElementProperties);
    return { rageClickEvent: rageClickEvent, time: firstClick.timestamp };
}
function isClickOutsideRageClickWindow(clickWindow, click) {
    var firstIndex = Math.max(0, clickWindow.length - RAGE_CLICK_THRESHOLD + 1);
    var firstClick = clickWindow[firstIndex];
    return click.timestamp - firstClick.timestamp >= RAGE_CLICK_WINDOW_MS;
}
function isNewElement(clickWindow, click) {
    return (clickWindow.length > 0 &&
        clickWindow[clickWindow.length - 1].closestTrackedAncestor !== click.closestTrackedAncestor);
}
export function trackRageClicks(_a) {
    var amplitude = _a.amplitude, allObservables = _a.allObservables, shouldTrackRageClick = _a.shouldTrackRageClick;
    var clickObservable = allObservables.clickObservable;
    // Keep track of all clicks within the sliding window
    var clickWindow = [];
    // Keep track of the region box for all clicks, to determine when a rage click is out of bounds
    var clickBoundingBox = {};
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var triggerRageClickTimeout;
    // helper function to reset the click window and region box
    function resetClickWindow(click) {
        clickWindow = [];
        clickBoundingBox = {};
        if (click) {
            addCoordinates(clickBoundingBox, click);
            clickWindow.push(click);
        }
    }
    return clickObservable
        .pipe(filter(filterOutNonTrackableEvents), filter(function (click) {
        return shouldTrackRageClick('click', click.closestTrackedAncestor);
    }), map(function (click) {
        // reset the click wait timer if it exists
        if (triggerRageClickTimeout) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            clearTimeout(triggerRageClickTimeout);
        }
        // add click to bounding box
        addCoordinates(clickBoundingBox, click);
        // if there's just one click in the window, add it and return
        if (clickWindow.length === 0) {
            clickWindow.push(click);
            return null;
        }
        // if current click is:
        //  1. outside the rage click window
        //  2. on a new element
        //  3. out of bounds
        // then start a new click window
        if (isNewElement(clickWindow, click) ||
            isClickOutsideRageClickWindow(clickWindow, click) ||
            clickBoundingBox.isOutOfBounds) {
            var returnValue = clickWindow.length >= RAGE_CLICK_THRESHOLD ? getRageClickAnalyticsEvent(clickWindow) : null;
            resetClickWindow(click);
            return returnValue;
        }
        // add click to current window
        clickWindow.push(click);
        // if we have enough clicks to be a rage click, set a timout to trigger the rage
        // click event after the time threshold is reached.
        // This will be cancelled if a new click is tracked.
        if (clickWindow.length >= RAGE_CLICK_THRESHOLD) {
            triggerRageClickTimeout = setTimeout(function () {
                var _a = getRageClickAnalyticsEvent(clickWindow), rageClickEvent = _a.rageClickEvent, time = _a.time;
                amplitude.track(AMPLITUDE_ELEMENT_RAGE_CLICKED_EVENT, rageClickEvent, { time: time });
                resetClickWindow();
            }, RAGE_CLICK_WINDOW_MS);
        }
        return null;
    }), filter(function (result) { return result !== null; }))
        .subscribe(function (data) {
        /* istanbul ignore if */
        if (data === null) {
            return;
        }
        amplitude.track(AMPLITUDE_ELEMENT_RAGE_CLICKED_EVENT, data.rageClickEvent, { time: data.time });
    });
}
//# sourceMappingURL=track-rage-click.js.map