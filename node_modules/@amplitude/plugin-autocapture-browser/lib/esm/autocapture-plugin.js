import { __assign, __awaiter, __generator, __read, __spreadArray, __values } from "tslib";
/* eslint-disable no-restricted-globals */
import { DEFAULT_CSS_SELECTOR_ALLOWLIST, DEFAULT_ACTION_CLICK_ALLOWLIST, DEFAULT_DATA_ATTRIBUTE_PREFIX, } from '@amplitude/analytics-core';
import { createRemoteConfigFetch } from '@amplitude/analytics-remote-config';
import * as constants from './constants';
import { fromEvent, map, share } from 'rxjs';
import { createShouldTrackEvent, } from './helpers';
import { WindowMessenger } from './libs/messenger';
import { trackClicks } from './autocapture/track-click';
import { trackChange } from './autocapture/track-change';
import { trackActionClick } from './autocapture/track-action-click';
import { createMutationObservable, createClickObservable } from './observables';
import { createLabeledEventToTriggerMap, createTriggerEvaluator, groupLabeledEventIdsByEventType, } from './pageActions/triggers';
import { DataExtractor } from './data-extractor';
export var ObservablesEnum;
(function (ObservablesEnum) {
    ObservablesEnum["ClickObservable"] = "clickObservable";
    ObservablesEnum["ChangeObservable"] = "changeObservable";
    // ErrorObservable = 'errorObservable',
    ObservablesEnum["NavigateObservable"] = "navigateObservable";
    ObservablesEnum["MutationObservable"] = "mutationObservable";
})(ObservablesEnum || (ObservablesEnum = {}));
export var autocapturePlugin = function (options) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (options === void 0) { options = {}; }
    var _j = options.dataAttributePrefix, dataAttributePrefix = _j === void 0 ? DEFAULT_DATA_ATTRIBUTE_PREFIX : _j, _k = options.visualTaggingOptions, visualTaggingOptions = _k === void 0 ? {
        enabled: true,
        messenger: new WindowMessenger(),
    } : _k;
    options.cssSelectorAllowlist = (_a = options.cssSelectorAllowlist) !== null && _a !== void 0 ? _a : DEFAULT_CSS_SELECTOR_ALLOWLIST;
    options.actionClickAllowlist = (_b = options.actionClickAllowlist) !== null && _b !== void 0 ? _b : DEFAULT_ACTION_CLICK_ALLOWLIST;
    options.debounceTime = (_c = options.debounceTime) !== null && _c !== void 0 ? _c : 0; // TODO: update this when rage clicks are added to 1000ms
    options.pageUrlExcludelist = (_d = options.pageUrlExcludelist) === null || _d === void 0 ? void 0 : _d.reduce(function (acc, excludePattern) {
        if (typeof excludePattern === 'string') {
            acc.push(excludePattern);
        }
        if (excludePattern instanceof RegExp) {
            acc.push(excludePattern);
        }
        if (typeof excludePattern === 'object' && excludePattern !== null && 'pattern' in excludePattern) {
            try {
                acc.push(new RegExp(excludePattern.pattern));
            }
            catch (regexError) {
                console.warn("Invalid regex pattern: ".concat(excludePattern.pattern), regexError);
                return acc;
            }
        }
        return acc;
    }, []);
    var name = constants.PLUGIN_NAME;
    var type = 'enrichment';
    var subscriptions = [];
    // Create data extractor based on options
    var dataExtractor = new DataExtractor(options);
    // Create observables on events on the window
    var createObservables = function () {
        var _a;
        // Create Observables from direct user events
        var clickObservable = createClickObservable().pipe(map(function (click) {
            return dataExtractor.addAdditionalEventProperties(click, 'click', options.cssSelectorAllowlist, dataAttributePrefix);
        }), share());
        var changeObservable = fromEvent(document, 'change', { capture: true }).pipe(map(function (change) {
            return dataExtractor.addAdditionalEventProperties(change, 'change', options.cssSelectorAllowlist, dataAttributePrefix);
        }), share());
        // Create Observable from unhandled errors
        // const errorObservable = fromEvent<ErrorEvent>(window, 'error').pipe(
        //   map((error) => addAdditionalEventProperties(error, 'error')),
        // );
        // Create observable for URL changes
        var navigateObservable;
        /* istanbul ignore next */
        if (window.navigation) {
            navigateObservable = fromEvent(window.navigation, 'navigate').pipe(map(function (navigate) {
                return dataExtractor.addAdditionalEventProperties(navigate, 'navigate', options.cssSelectorAllowlist, dataAttributePrefix);
            }), share());
        }
        // Track DOM Mutations using shared observable
        var mutationObservable = createMutationObservable().pipe(map(function (mutation) {
            return dataExtractor.addAdditionalEventProperties(mutation, 'mutation', options.cssSelectorAllowlist, dataAttributePrefix);
        }), share());
        return _a = {},
            _a[ObservablesEnum.ClickObservable] = clickObservable,
            _a[ObservablesEnum.ChangeObservable] = changeObservable,
            // [ObservablesEnum.ErrorObservable]: errorObservable,
            _a[ObservablesEnum.NavigateObservable] = navigateObservable,
            _a[ObservablesEnum.MutationObservable] = mutationObservable,
            _a;
    };
    // Group labeled events by event type (eg. click, change)
    var groupedLabeledEvents = groupLabeledEventIdsByEventType(Object.values((_f = (_e = options.pageActions) === null || _e === void 0 ? void 0 : _e.labeledEvents) !== null && _f !== void 0 ? _f : {}));
    var labeledEventToTriggerMap = createLabeledEventToTriggerMap((_h = (_g = options.pageActions) === null || _g === void 0 ? void 0 : _g.triggers) !== null && _h !== void 0 ? _h : []);
    // Evaluate triggers for the given event by running the actions associated with the matching triggers
    var evaluateTriggers = createTriggerEvaluator(groupedLabeledEvents, labeledEventToTriggerMap, dataExtractor, options);
    // Function to recalculate internal variables when remote config is updated
    var recomputePageActionsData = function (remotePageActions) {
        var _a, _b;
        if (remotePageActions) {
            // Merge remote config with local options
            options.pageActions = __assign(__assign({}, options.pageActions), remotePageActions);
            // Recalculate internal variables
            groupedLabeledEvents = groupLabeledEventIdsByEventType(Object.values((_a = options.pageActions.labeledEvents) !== null && _a !== void 0 ? _a : {}));
            labeledEventToTriggerMap = createLabeledEventToTriggerMap((_b = options.pageActions.triggers) !== null && _b !== void 0 ? _b : []);
            // Update evaluateTriggers function
            evaluateTriggers.update(groupedLabeledEvents, labeledEventToTriggerMap, options);
        }
    };
    var setup = function (config, amplitude) { return __awaiter(void 0, void 0, void 0, function () {
        var shouldTrackEvent, shouldTrackActionClick, allObservables, clickTrackingSubscription, changeSubscription, actionClickSubscription, allowlist, actionClickAllowlist;
        var _a, _b;
        return __generator(this, function (_c) {
            /* istanbul ignore if */
            if (typeof document === 'undefined') {
                return [2 /*return*/];
            }
            // Fetch remote config for pageActions in a non-blocking manner
            if (config.fetchRemoteConfig) {
                createRemoteConfigFetch({
                    localConfig: config,
                    configKeys: ['analyticsSDK.pageActions'],
                })
                    .then(function (remoteConfigFetch) { return __awaiter(void 0, void 0, void 0, function () {
                    var remotePageActions, error_1;
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, remoteConfigFetch.getRemoteConfig('analyticsSDK', 'pageActions')];
                            case 1:
                                remotePageActions = _b.sent();
                                recomputePageActionsData(remotePageActions);
                                return [3 /*break*/, 3];
                            case 2:
                                error_1 = _b.sent();
                                // Log error but don't fail the setup
                                /* istanbul ignore next */
                                (_a = config === null || config === void 0 ? void 0 : config.loggerProvider) === null || _a === void 0 ? void 0 : _a.error("Failed to fetch remote config: ".concat(String(error_1)));
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); })
                    .catch(function (error) {
                    var _a;
                    // Log error but don't fail the setup
                    /* istanbul ignore next */
                    (_a = config === null || config === void 0 ? void 0 : config.loggerProvider) === null || _a === void 0 ? void 0 : _a.error("Failed to create remote config fetch: ".concat(String(error)));
                });
            }
            shouldTrackEvent = createShouldTrackEvent(options, options.cssSelectorAllowlist);
            shouldTrackActionClick = createShouldTrackEvent(options, options.actionClickAllowlist);
            allObservables = createObservables();
            clickTrackingSubscription = trackClicks({
                allObservables: allObservables,
                options: options,
                amplitude: amplitude,
                shouldTrackEvent: shouldTrackEvent,
                evaluateTriggers: evaluateTriggers.evaluate.bind(evaluateTriggers),
            });
            subscriptions.push(clickTrackingSubscription);
            changeSubscription = trackChange({
                allObservables: allObservables,
                getEventProperties: function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return dataExtractor.getEventProperties.apply(dataExtractor, __spreadArray(__spreadArray([], __read(args), false), [dataAttributePrefix], false));
                },
                amplitude: amplitude,
                shouldTrackEvent: shouldTrackEvent,
                evaluateTriggers: evaluateTriggers.evaluate.bind(evaluateTriggers),
            });
            subscriptions.push(changeSubscription);
            actionClickSubscription = trackActionClick({
                allObservables: allObservables,
                options: options,
                getEventProperties: function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return dataExtractor.getEventProperties.apply(dataExtractor, __spreadArray(__spreadArray([], __read(args), false), [dataAttributePrefix], false));
                },
                amplitude: amplitude,
                shouldTrackEvent: shouldTrackEvent,
                shouldTrackActionClick: shouldTrackActionClick,
            });
            subscriptions.push(actionClickSubscription);
            /* istanbul ignore next */
            (_a = config === null || config === void 0 ? void 0 : config.loggerProvider) === null || _a === void 0 ? void 0 : _a.log("".concat(name, " has been successfully added."));
            // Setup visual tagging selector
            if (window.opener && visualTaggingOptions.enabled) {
                allowlist = options.cssSelectorAllowlist;
                actionClickAllowlist = options.actionClickAllowlist;
                /* istanbul ignore next */
                (_b = visualTaggingOptions.messenger) === null || _b === void 0 ? void 0 : _b.setup(__assign(__assign({ dataExtractor: dataExtractor, logger: config === null || config === void 0 ? void 0 : config.loggerProvider }, ((config === null || config === void 0 ? void 0 : config.serverZone) && { endpoint: constants.AMPLITUDE_ORIGINS_MAP[config.serverZone] })), { isElementSelectable: createShouldTrackEvent(options, __spreadArray(__spreadArray([], __read(allowlist), false), __read(actionClickAllowlist), false)), cssSelectorAllowlist: allowlist, actionClickAllowlist: actionClickAllowlist }));
            }
            return [2 /*return*/];
        });
    }); };
    var execute = function (event) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, event];
        });
    }); };
    var teardown = function () { return __awaiter(void 0, void 0, void 0, function () {
        var subscriptions_1, subscriptions_1_1, subscription;
        var e_1, _a;
        return __generator(this, function (_b) {
            try {
                for (subscriptions_1 = __values(subscriptions), subscriptions_1_1 = subscriptions_1.next(); !subscriptions_1_1.done; subscriptions_1_1 = subscriptions_1.next()) {
                    subscription = subscriptions_1_1.value;
                    subscription.unsubscribe();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (subscriptions_1_1 && !subscriptions_1_1.done && (_a = subscriptions_1.return)) _a.call(subscriptions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return [2 /*return*/];
        });
    }); };
    return {
        name: name,
        type: type,
        setup: setup,
        execute: execute,
        teardown: teardown,
    };
};
//# sourceMappingURL=autocapture-plugin.js.map