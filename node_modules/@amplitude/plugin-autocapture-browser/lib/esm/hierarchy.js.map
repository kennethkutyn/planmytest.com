{"version":3,"file":"hierarchy.js","sourceRoot":"","sources":["../../src/hierarchy.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNonSensitiveElement } from './helpers';\nimport { DATA_AMP_MASK_ATTRIBUTES, MASKED_TEXT_VALUE, TEXT_MASK_ATTRIBUTE } from './constants';\nimport type { HierarchyNode } from './typings/autocapture';\n\nconst BLOCKED_ATTRIBUTES = new Set([\n  // Already captured elsewhere in the hierarchy object\n  'id',\n  'class',\n\n  // non-useful and potentially large attribute\n  'style',\n\n  // sensitive as prefilled form data may populate this attribute\n  'value',\n\n  // DOM events\n  'onclick',\n  'onchange',\n  'oninput',\n  'onblur',\n  'onsubmit',\n  'onfocus',\n  'onkeydown',\n  'onkeyup',\n  'onkeypress',\n\n  // React specific\n  'data-reactid',\n  'data-react-checksum',\n  'data-reactroot',\n\n  // Amplitude specific - used for redaction but should not be included in getElementProperties\n  DATA_AMP_MASK_ATTRIBUTES,\n  TEXT_MASK_ATTRIBUTE,\n]);\nconst SENSITIVE_ELEMENT_ATTRIBUTE_ALLOWLIST = ['type'];\n\nconst SVG_TAGS = ['svg', 'path', 'g'];\nconst HIGHLY_SENSITIVE_INPUT_TYPES = ['password', 'hidden'];\nconst MAX_ATTRIBUTE_LENGTH = 128;\nexport const MAX_HIERARCHY_LENGTH = 1024;\n\nexport function getElementProperties(\n  element: Element | null,\n  userMaskedAttributeNames: Set<string>,\n): HierarchyNode | null {\n  if (element === null) {\n    return null;\n  }\n\n  const tagName = String(element.tagName).toLowerCase();\n  const properties: HierarchyNode = {\n    tag: tagName,\n  };\n\n  const siblings = Array.from(element.parentElement?.children ?? []);\n  if (siblings.length) {\n    properties.index = siblings.indexOf(element);\n    properties.indexOfType = siblings.filter((el) => el.tagName === element.tagName).indexOf(element);\n  }\n\n  const prevSiblingTag = element.previousElementSibling?.tagName?.toLowerCase();\n  if (prevSiblingTag) {\n    properties.prevSib = String(prevSiblingTag);\n  }\n\n  const id = element.getAttribute('id');\n  if (id) {\n    properties.id = String(id);\n  }\n\n  const classes = Array.from(element.classList);\n  if (classes.length) {\n    properties.classes = classes;\n  }\n\n  const attributes: Record<string, string> = {};\n  const attributesArray = Array.from(element.attributes);\n  const filteredAttributes = attributesArray.filter((attr) => !BLOCKED_ATTRIBUTES.has(attr.name));\n  const isSensitiveElement = !isNonSensitiveElement(element);\n\n  // if input is hidden or password or for SVGs, skip attribute collection entirely\n  if (!HIGHLY_SENSITIVE_INPUT_TYPES.includes(String(element.getAttribute('type'))) && !SVG_TAGS.includes(tagName)) {\n    for (const attr of filteredAttributes) {\n      // If sensitive element, only allow certain attributes\n      if (isSensitiveElement && !SENSITIVE_ELEMENT_ATTRIBUTE_ALLOWLIST.includes(attr.name)) {\n        continue;\n      }\n\n      if (userMaskedAttributeNames.has(attr.name)) {\n        attributes[attr.name] = MASKED_TEXT_VALUE;\n        continue;\n      }\n\n      // Finally cast attribute value to string and limit attribute value length\n      attributes[attr.name] = String(attr.value).substring(0, MAX_ATTRIBUTE_LENGTH);\n    }\n  }\n\n  if (Object.keys(attributes).length) {\n    properties.attrs = attributes;\n  }\n\n  return properties;\n}\n\nexport function getAncestors(targetEl: Element | null): Element[] {\n  const ancestors: Element[] = [];\n\n  if (!targetEl) {\n    return ancestors;\n  }\n\n  // Add self to the list of ancestors\n  ancestors.push(targetEl);\n  let current = targetEl.parentElement;\n  while (current && current.tagName !== 'HTML') {\n    ancestors.push(current);\n    current = current.parentElement;\n  }\n  return ancestors;\n}\n"]}