import { Config } from '@amplitude/analytics-types';
import { CreateRemoteConfigFetch, RemoteConfigFetch as IRemoteConfigFetch, RemoteConfigAPIResponse, RemoteConfigLocalConfig, RemoteConfigMetric } from './types';
export declare const REMOTE_CONFIG_SERVER_URL = "https://sr-client-cfg.amplitude.com/config";
export declare const REMOTE_CONFIG_SERVER_URL_STAGING = "https://sr-client-cfg.stag2.amplitude.com/config";
export declare const REMOTE_CONFIG_SERVER_URL_EU = "https://sr-client-cfg.eu.amplitude.com/config";
export declare class RemoteConfigFetch<RemoteConfig extends {
    [key: string]: object;
}> implements IRemoteConfigFetch<RemoteConfig> {
    localConfig: RemoteConfigLocalConfig;
    retryTimeout: number;
    attempts: number;
    lastFetchedSessionId: number | string | undefined;
    sessionTargetingMatch: boolean;
    configKeys: string[];
    metrics: RemoteConfigMetric;
    constructor({ localConfig, configKeys }: {
        localConfig: Config;
        configKeys: string[];
    });
    getRemoteNamespaceConfig: (configNamespace: string, sessionId?: number | string) => Promise<RemoteConfig | undefined>;
    getRemoteConfig: <K extends keyof RemoteConfig>(configNamespace: string, key: K, sessionId?: number | string) => Promise<RemoteConfig[K] | undefined>;
    getServerUrl(): string;
    fetchWithTimeout: (sessionId?: number | string) => Promise<RemoteConfigAPIResponse<RemoteConfig> | void>;
    fetchRemoteConfig: (signal: AbortController['signal'], sessionId?: number | string) => Promise<RemoteConfigAPIResponse<RemoteConfig> | void>;
    retryFetch: (signal: AbortController['signal'], sessionId?: number | string) => Promise<RemoteConfigAPIResponse<RemoteConfig> | void>;
    parseAndStoreConfig: (res: Response) => Promise<RemoteConfigAPIResponse<RemoteConfig>>;
    completeRequest({ err, success }: {
        err?: string;
        success?: string;
    }): void;
}
export declare const createRemoteConfigFetch: CreateRemoteConfigFetch;
//# sourceMappingURL=remote-config.d.ts.map