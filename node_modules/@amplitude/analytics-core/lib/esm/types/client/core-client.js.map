{"version":3,"file":"core-client.js","sourceRoot":"","sources":["../../../../src/types/client/core-client.ts"],"names":[],"mappings":"","sourcesContent":["import { AmplitudeReturn } from '../../utils/return-wrapper';\nimport { BaseEvent, EventOptions } from '../event/base-event';\nimport { Result } from '../result';\nimport { IIdentify } from '../../identify';\nimport { IRevenue } from '../../revenue';\nimport { Plugin } from '../plugin';\n\nexport interface PluginHost {\n  plugin(name: string): Plugin | undefined;\n  plugins<T extends Plugin>(pluginClass: new (...args: any[]) => T): T[];\n}\n\nexport interface Client extends CoreClient {\n  /**\n   * Returns current user ID.\n   *\n   * ```typescript\n   * const userId = getUserId();\n   * ```\n   */\n  getUserId(): string | undefined;\n\n  /**\n   * Sets a new user ID.\n   *\n   * ```typescript\n   * setUserId('userId');\n   * ```\n   */\n  setUserId(userId: string | undefined): void;\n\n  /**\n   * Returns current device ID.\n   *\n   * ```typescript\n   * const deviceId = getDeviceId();\n   * ```\n   */\n  getDeviceId(): string | undefined;\n\n  /**\n   * Sets a new device ID.\n   * When setting a custom device ID, make sure the value is sufficiently unique.\n   * A uuid is recommended.\n   *\n   * ```typescript\n   * setDeviceId('deviceId');\n   * ```\n   */\n  setDeviceId(deviceId: string): void;\n\n  /**\n   * Returns current session ID.\n   *\n   * ```typescript\n   * const sessionId = getSessionId();\n   * ```\n   */\n  getSessionId(): number | undefined;\n\n  /**\n   * Sets a new session ID.\n   * When setting a custom session ID, make sure the value is in milliseconds since epoch (Unix Timestamp).\n   *\n   * ```typescript\n   * setSessionId(Date.now());\n   * ```\n   */\n  setSessionId(sessionId: number): void;\n\n  /**\n   * Extends the current session (advanced)\n   *\n   * Normally sessions are extended automatically by track()'ing events. If you want to extend the session without\n   * tracking and event, this will set the last user interaction to the current time.\n   *\n   * ```typescript\n   * extendSession();\n   * ```\n   */\n  extendSession(): void;\n\n  /**\n   * Anonymizes users after they log out, by:\n   *\n   * * setting userId to undefined\n   * * setting deviceId to a new uuid value\n   *\n   * With an undefined userId and a completely new deviceId, the current user would appear as a brand new user in dashboard.\n   *\n   * ```typescript\n   * import { reset } from '@amplitude/analytics-browser';\n   *\n   * reset();\n   * ```\n   */\n  reset(): void;\n}\n\nexport interface CoreClient {\n  /**\n   * Adds a new plugin.\n   *\n   * ```typescript\n   * const plugin = {\n   *   name: 'myPlugin',\n   *   type: 'enrichment',\n   *   setup(config: Config) {\n   *     return;\n   *   },\n   *   execute(context: Event) {\n   *     return context;\n   *   },\n   * };\n   * amplitude.add(plugin);\n   * ```\n   */\n  add(plugin: Plugin): AmplitudeReturn<void>;\n\n  /**\n   * Removes a plugin.\n   *\n   * ```typescript\n   * amplitude.remove('myPlugin');\n   * ```\n   */\n  remove(pluginName: string): AmplitudeReturn<void>;\n\n  /**\n   * Tracks user-defined event, with specified type, optional event properties and optional overwrites.\n   *\n   * ```typescript\n   * // event tracking with event type only\n   * track('Page Load');\n   *\n   * // event tracking with event type and additional event properties\n   * track('Page Load', { loadTime: 1000 });\n   *\n   * // event tracking with event type, additional event properties, and overwritten event options\n   * track('Page Load', { loadTime: 1000 }, { sessionId: -1 });\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await track('Page Load').promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  track(\n    eventInput: BaseEvent | string,\n    eventProperties?: Record<string, any>,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Alias for track()\n   */\n  logEvent(\n    eventInput: BaseEvent | string,\n    eventProperties?: Record<string, any>,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Sends an identify event containing user property operations\n   *\n   * ```typescript\n   * const id = new Identify();\n   * id.set('colors', ['rose', 'gold']);\n   * identify(id);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await identify(id).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  identify(identify: IIdentify, eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sends a group identify event containing group property operations.\n   *\n   * ```typescript\n   * const id = new Identify();\n   * id.set('skills', ['js', 'ts']);\n   * const groupType = 'org';\n   * const groupName = 'engineering';\n   * groupIdentify(groupType, groupName, id);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await groupIdentify(groupType, groupName, id).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  groupIdentify(\n    groupType: string,\n    groupName: string | string[],\n    identify: IIdentify,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Assigns a user to group\n   *\n   * ```typescript\n   * const groupType = 'orgId';\n   * const groupName = '15';\n   * setGroup(groupType, groupName, { user_id: '12345' })\n   * ```\n   */\n  setGroup(groupType: string, groupName: string | string[], eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sends a revenue event containing revenue property operations.\n   *\n   * ```typescript\n   * const rev = new Revenue();\n   * rev.setRevenue(100);\n   * revenue(rev);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await revenue(rev).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  revenue(revenue: IRevenue, eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sets a new optOut config value. This toggles event tracking on/off.\n   *\n   *```typescript\n   * // Stops tracking\n   * setOptOut(true);\n   *\n   * // Starts/resumes tracking\n   * setOptOut(false);\n   * ```\n   */\n  setOptOut(optOut: boolean): void;\n\n  /**\n   * Flush all unsent events.\n   *\n   *```typescript\n   * flush();\n   * ```\n   */\n  flush(): AmplitudeReturn<void>;\n}\n"]}