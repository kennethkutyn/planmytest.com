{"version":3,"file":"browser-client.js","sourceRoot":"","sources":["../../../../src/types/client/browser-client.ts"],"names":[],"mappings":"","sourcesContent":["import { TransportType } from '../transport';\nimport { Client } from './core-client';\nimport { AnalyticsIdentity, Plugin } from '../plugin';\nimport { AmplitudeReturn } from '../../utils/return-wrapper';\nimport { BrowserConfig, BrowserOptions } from '../config/browser-config';\n\nexport interface BrowserClient extends Client {\n  /**\n   * Initializes the Amplitude SDK with your apiKey, optional configurations.\n   * This method must be called before any other operations.\n   *\n   * ```typescript\n   * await init(API_KEY, options).promise;\n   * ```\n   */\n  init(apiKey: string, options?: BrowserOptions): AmplitudeReturn<void>;\n\n  init(apiKey: string, userId?: string, options?: BrowserOptions): AmplitudeReturn<void>;\n\n  /**\n   * Sets the network transport type for events.\n   *\n   * ```typescript\n   * // Use Fetch API\n   * setTransport('fetch');\n   *\n   * // Use XMLHttpRequest API\n   * setTransport('xhr');\n   *\n   * // Use navigator.sendBeacon API\n   * setTransport('beacon');\n   * ```\n   */\n  setTransport(transport: TransportType): void;\n\n  /**\n   * Adds a new plugin.\n   *\n   * ```typescript\n   * const plugin = {\n   *   name: 'my-plugin',\n   *   type: 'enrichment',\n   *   async setup(config: BrowserConfig, amplitude: BrowserClient) {\n   *     return;\n   *   },\n   *   async execute(event: Event) {\n   *     return event;\n   *   },\n   * };\n   * amplitude.add(plugin);\n   * ```\n   */\n  add(plugin: Plugin<BrowserClient, BrowserConfig>): AmplitudeReturn<void>;\n\n  /**\n   * Returns the current identity.\n   *\n   * ```typescript\n   * const identity = getIdentity();\n   * ```\n   */\n  getIdentity(): AnalyticsIdentity;\n\n  /**\n   * Returns the current optOut config value.\n   *\n   * ```typescript\n   * const optOut = getOptOut();\n   * ```\n   */\n  getOptOut(): boolean | undefined;\n}\n"]}