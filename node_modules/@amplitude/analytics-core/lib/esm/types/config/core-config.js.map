{"version":3,"file":"core-config.js","sourceRoot":"","sources":["../../../../src/types/config/core-config.ts"],"names":[],"mappings":"","sourcesContent":["import { LogLevel } from '../loglevel';\nimport { ILogger } from '../../logger';\nimport { OfflineDisabled } from '../offline';\nimport { Plan } from '../event/plan';\nimport { IngestionMetadata } from '../event/ingestion-metadata';\nimport { ServerZoneType } from '../server-zone';\nimport { Transport } from '../transport';\nimport { Storage } from '../storage';\nimport { Event } from '../event/event';\n\nexport interface IConfig {\n  /**\n   * Your Amplitude Project API key.\n   */\n  apiKey: string;\n  /**\n   * The interval of uploading events to Amplitude in milliseconds.\n   */\n  flushIntervalMillis: number;\n  /**\n   * The maximum number of retries for failed upload attempts. This is only applicable to retryable errors.\n   */\n  flushMaxRetries: number;\n  /**\n   * The maximum number of events that are batched in a single upload attempt.\n   */\n  flushQueueSize: number;\n  /**\n   * The instance name. For tracking events to multiple Amplitude projects in your application.\n   */\n  instanceName?: string;\n  /**\n   * Level of logs to be printed in the developer console.\n   * Valid values are `LogLevel.None`, `LogLevel.Error`, `LogLevel.Warn`, `LogLevel.Verbose`,  `LogLevel.Debug`\n   */\n  logLevel: LogLevel;\n  /**\n   * A custom Logger class to emit log messages to desired destination.\n   */\n  loggerProvider: ILogger;\n  /**\n   * The minimum length for the value of userId and deviceId properties.\n   */\n  minIdLength?: number;\n  /**\n   * Whether the SDK is connected to network.\n   */\n  offline?: boolean | typeof OfflineDisabled;\n  /**\n   *  The flag to opt this device out of Amplitude tracking.\n   *  If this flag is set, no additional information will be stored for the user.\n   */\n  optOut: boolean;\n  /**\n   * Tracking plan properties.\n   * Amplitude internal use.\n   */\n  plan?: Plan;\n  /**\n   * Ingestion metadata.\n   * Amplitude internal use.\n   */\n  ingestionMetadata?: IngestionMetadata;\n  /**\n   * The URL where events are upload to.\n   */\n  serverUrl?: string;\n  /**\n   * The Amplitude server zone.\n   * Set this to EU for Amplitude projects created in EU data center.\n   */\n  serverZone?: ServerZoneType;\n  /**\n   *  The storage provider to persist unsent events.\n   */\n  storageProvider?: Storage<Event[]>;\n  /**\n   * A customer Transport Class for sending data to a server.\n   */\n  transportProvider: Transport;\n  /**\n   * The flag of whether to upload events to Batch API instead of the default HTTP V2 API.\n   */\n  useBatch: boolean;\n  /**\n   * Metrics of the SDK.\n   */\n  requestMetadata?: IRequestMetadata;\n}\n\nexport interface IRequestMetadata {\n  sdk: {\n    metrics: {\n      histogram: IHistogramOptions;\n    };\n  };\n\n  recordHistogram<T extends HistogramKey>(key: T, value: IHistogramOptions[T]): void;\n}\n\nexport interface IHistogramOptions {\n  remote_config_fetch_time_IDB?: number;\n  remote_config_fetch_time_API_success?: number;\n  remote_config_fetch_time_API_fail?: number;\n}\n\nexport type HistogramKey = keyof IHistogramOptions;\n\nexport interface ConfigOptions extends Partial<IConfig> {\n  apiKey: string;\n  transportProvider: Transport;\n}\n"]}