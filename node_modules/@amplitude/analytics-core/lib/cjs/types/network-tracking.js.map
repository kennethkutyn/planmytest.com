{"version":3,"file":"network-tracking.js","sourceRoot":"","sources":["../../../src/types/network-tracking.ts"],"names":[],"mappings":"","sourcesContent":["export interface NetworkTrackingOptions {\n  /**\n   * Suppresses tracking Amplitude requests from network capture.\n   * @defaultValue `true`\n   */\n  ignoreAmplitudeRequests?: boolean;\n  /**\n   * Hosts to ignore for network capture. Supports wildcard.\n   * @defaultValue `[]`\n   */\n  ignoreHosts?: string[];\n  /**\n   * Rules to determine which network requests should be captured.\n   *\n   * Performs matching on array in reverse order.\n   */\n  captureRules?: NetworkCaptureRule[];\n}\n\nexport interface BodyCaptureRule {\n  /**\n   * List of JSON pointers to capture from a request or response body (JSON objects only)\n   *\n   * Includes nothing, by default.\n   * Any keys defined in excludelist will be excluded from the capture.\n   *\n   * Follows a syntax similar to [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901), except:\n   * - The leading / is optional\n   * - A wildcard * can be used to match any key\n   * - A double-wildcard ** can be used to match any number of keys (or no keys)\n   * - The structure of the JSON is preserved (ie: the captured body is a subset of the original body)\n   */\n  allowlist?: string[];\n  /**\n   * List of JSON pointers to exclude from a request or response body (JSON objects only)\n   *\n   * This \"uncaptures\" any attributes that are captured by the allowlist.\n   */\n  blocklist?: string[];\n}\n\nexport interface NetworkCaptureRule {\n  /**\n   * Hosts to allow for network capture. Supports wildcard.\n   * @defaultValue `[\"*\"]` all hosts (except amplitude)\n   */\n  hosts?: string[];\n  /**\n   * URL patterns to allow for network capture. Supports wildcard.\n   *\n   * This takes precedence over `hosts`\n   * @experimental This feature is experimental and may not be stable\n   * @defaultValue `[\"*\"]` all URLs\n   */\n  urls?: (string | RegExp)[];\n  /**\n   * Methods to allow for network capture.\n   * @defaultValue `[\"*\"]` all methods\n   */\n  methods?: string[];\n  /**\n   * Range list that defines the status codes to be captured.\n   * @defaultValue `500-599`\n   */\n  statusCodeRange?: string;\n  /**\n   * Capture headers from network response.\n   *\n   * If true, SAFE_HEADERS are captured. If false, no headers are captured.\n   * If a string array, the headers in the array are captured.\n   *\n   * @experimental This feature is experimental and may not be stable\n   * @defaultValue `false`\n   */\n  responseHeaders?: string[] | boolean;\n  /**\n   * Capture headers from network request.\n   *\n   * If true, SAFE_HEADERS are captured. If false, no headers are captured.\n   * If a string array, the headers in the array are captured.\n   *\n   * @experimental This feature is experimental and may not be stable\n   * @defaultValue `false`\n   */\n  requestHeaders?: string[] | boolean;\n  /**\n   * Determines what to capture from the response body.\n   * @experimental This feature is experimental and may not be stable\n   */\n  responseBody?: BodyCaptureRule;\n  /**\n   * Determines what to capture from the request body.\n   * @experimental This feature is experimental and may not be stable\n   */\n  requestBody?: BodyCaptureRule;\n  /**\n   * Threshold   for what is classified as a slow request (in seconds).\n   * @defaultValue `3`\n   */\n  // slowThreshold?: number;\n}\n"]}