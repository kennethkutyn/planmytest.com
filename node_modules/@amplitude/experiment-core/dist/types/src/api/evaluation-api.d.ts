import { EvaluationVariant } from '../evaluation/flag';
import { HttpClient } from '../transport/http';
export type EvaluationMode = 'remote' | 'local';
export type DeliveryMethod = 'feature' | 'web';
export type TrackingOption = 'track' | 'no-track' | 'read-only';
export type GetVariantsOptions = {
    flagKeys?: string[];
    trackingOption?: TrackingOption;
    deliveryMethod?: DeliveryMethod;
    evaluationMode?: EvaluationMode;
    timeoutMillis?: number;
};
export interface EvaluationApi {
    getVariants(user: Record<string, unknown>, options?: GetVariantsOptions): Promise<Record<string, EvaluationVariant>>;
}
export declare class SdkEvaluationApi implements EvaluationApi {
    private readonly deploymentKey;
    private readonly serverUrl;
    private readonly httpClient;
    constructor(deploymentKey: string, serverUrl: string, httpClient: HttpClient);
    getVariants(user: Record<string, unknown>, options?: GetVariantsOptions): Promise<Record<string, EvaluationVariant>>;
}
