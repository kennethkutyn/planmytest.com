import { EvaluationFlag } from '@amplitude/experiment-core';
import { Storage } from '../types/storage';
import { Variant } from '../types/variant';
export declare const getVariantStorage: (deploymentKey: string, instanceName: string, storage: Storage) => LoadStoreCache<Variant>;
export declare const getFlagStorage: (deploymentKey: string, instanceName: string, storage?: Storage) => LoadStoreCache<EvaluationFlag>;
export declare class LoadStoreCache<V> {
    private readonly namespace;
    private readonly storage;
    private readonly transformer;
    private cache;
    constructor(namespace: string, storage: Storage, transformer?: (value: unknown) => V);
    get(key: string): V | undefined;
    getAll(): Record<string, V>;
    put(key: string, value: V): void;
    putAll(values: Record<string, V>): void;
    remove(key: string): void;
    clear(): void;
    load(): void;
    store(values?: Record<string, V>): void;
}
export declare const transformVariantFromStorage: (storageValue: unknown) => Variant;
