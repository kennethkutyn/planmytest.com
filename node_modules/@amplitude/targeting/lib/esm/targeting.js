import { __awaiter, __generator } from "tslib";
import { EvaluationEngine } from '@amplitude/experiment-core';
import { targetingIDBStore } from './targeting-idb-store';
var Targeting = /** @class */ (function () {
    function Targeting() {
        var _this = this;
        this.evaluateTargeting = function (_a) {
            var apiKey = _a.apiKey, loggerProvider = _a.loggerProvider, event = _a.event, sessionId = _a.sessionId, userProperties = _a.userProperties, deviceId = _a.deviceId, flag = _a.flag;
            return __awaiter(_this, void 0, void 0, function () {
                var eventTypes, _b, eventStrings, context, targetingBucket;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(event && event.time)) return [3 /*break*/, 2];
                            return [4 /*yield*/, targetingIDBStore.storeEventTypeForSession({
                                    loggerProvider: loggerProvider,
                                    apiKey: apiKey,
                                    sessionId: sessionId,
                                    eventType: event.event_type,
                                    eventTime: event.time,
                                })];
                        case 1:
                            _b = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _b = undefined;
                            _c.label = 3;
                        case 3:
                            eventTypes = _b;
                            eventStrings = eventTypes && new Set(Object.keys(eventTypes));
                            context = {
                                session_id: sessionId,
                                event: event,
                                event_types: eventStrings && Array.from(eventStrings),
                                user: {
                                    device_id: deviceId,
                                    user_properties: userProperties,
                                },
                            };
                            targetingBucket = this.evaluationEngine.evaluate(context, [flag]);
                            return [2 /*return*/, targetingBucket];
                    }
                });
            });
        };
        this.evaluationEngine = new EvaluationEngine();
    }
    return Targeting;
}());
export { Targeting };
//# sourceMappingURL=targeting.js.map