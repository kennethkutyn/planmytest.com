import { Logger as ILogger } from '@amplitude/analytics-types';
import { DBSchema, IDBPDatabase, IDBPTransaction } from 'idb';
export declare const MAX_IDB_STORAGE_LENGTH: number;
type EventData = {
    event_type: string;
};
type EventTypeStore = {
    [event_type: string]: {
        [timestamp: number]: EventData;
    };
};
export interface TargetingDB extends DBSchema {
    eventTypesForSession: {
        key: number;
        value: {
            sessionId: number;
            eventTypes: EventTypeStore;
        };
    };
}
export declare class TargetingIDBStore {
    dbs: {
        [apiKey: string]: IDBPDatabase<TargetingDB>;
    };
    createStore: (dbName: string) => Promise<IDBPDatabase<TargetingDB>>;
    openOrCreateDB: (apiKey: string) => Promise<IDBPDatabase<TargetingDB>>;
    updateEventListForSession: ({ sessionId, eventType, eventTime, loggerProvider, tx, }: {
        sessionId: number;
        eventType: string;
        eventTime: number;
        loggerProvider: ILogger;
        tx: IDBPTransaction<TargetingDB, ['eventTypesForSession'], 'readwrite'>;
    }) => Promise<EventTypeStore | undefined>;
    deleteOldSessionEventTypes: ({ currentSessionId, loggerProvider, tx, }: {
        currentSessionId: number;
        loggerProvider: ILogger;
        tx: IDBPTransaction<TargetingDB, ['eventTypesForSession'], 'readwrite'>;
    }) => Promise<void>;
    storeEventTypeForSession: ({ loggerProvider, sessionId, eventType, eventTime, apiKey, }: {
        loggerProvider: ILogger;
        apiKey: string;
        eventType: string;
        eventTime: number;
        sessionId: number;
    }) => Promise<EventTypeStore | undefined>;
}
export declare const targetingIDBStore: TargetingIDBStore;
export {};
//# sourceMappingURL=targeting-idb-store.d.ts.map