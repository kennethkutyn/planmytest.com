{"version":3,"file":"unified.js","sourceRoot":"","sources":["../../src/unified.ts"],"names":[],"mappings":";;;;AAAA,kEAAgE;AAChE,0FAKkD;AAClD,kFAK8C;AAE9C,qCAA0C;AAmB1C;IAAsC,4CAAgB;IAAtD;;IA2DA,CAAC;IAtDC,sBAAI,wCAAU;aAAd;YACE,gDAAgD;YAChD,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;gBAC7B,OAAO,SAAS,CAAC;aAClB;YAED,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,4CAAgB,CAAC,CAAC;YAClD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,UAAG,4CAAgB,CAAC,UAAU,0BAAuB,CAAC,CAAC;gBACxF,OAAO,SAAS,CAAC;aAClB;iBAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClC,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;aACjC;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,gCAAyB,4CAAgB,CAAC,UAAU,gBAAa,CAAC,CAAC;gBACpG,OAAO,SAAS,CAAC;aAClB;QACH,CAAC;;;OAAA;IAED;;;;;;OAMG;IACG,kCAAO,GAAb,UAAc,MAAc,EAAE,cAA+B;;;;;;wBACrD,aAAa,GAAG;4BACpB,UAAU,EAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,UAAU;4BACtC,YAAY,EAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,YAAY;yBAC3C,CAAC;wBAEF,iBAAM,GAAG,YAAC,IAAA,uBAAa,GAAE,CAAC,CAAC;wBAC3B,qBAAM,iBAAM,IAAI,YAAC,MAAM,wCAAO,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,SAAS,GAAK,aAAa,EAAG,CAAC,OAAO,EAAA;;wBAApF,SAAoF,CAAC;wBAErF,qBAAM,iBAAM,GAAG,YAAC,IAAA,mDAAmB,wCAAM,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,EAAE,GAAK,aAAa,EAAG,CAAC,CAAC,OAAO,EAAA;;wBAAzF,SAAyF,CAAC;wBAE1F,qBAAM,iBAAM,GAAG,YAAC,IAAA,4CAAgB,wCAAM,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,UAAU,GAAK,aAAa,EAAG,CAAC,CAAC,OAAO,EAAA;;wBAA9F,SAA8F,CAAC;wBAEzF,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,mDAAmB,CAAC,UAAU,CAAC,CAAC;wBAC7D,IAAI,QAAQ,KAAK,SAAS,EAAE;4BAC1B,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,UAAG,mDAAmB,CAAC,UAAU,0BAAuB,CAAC,CAAC;yBAC5F;6BAAM;4BACL,IAAI,CAAC,EAAE,GAAI,QAAgC,CAAC,EAAE,CAAC;yBAChD;;;;;KACF;IAED;;OAEG;IACH,0BAA0B;IAC1B,+BAAI,GAAJ,UAAK,MAAW,EAAE,eAAyC,EAAE,YAA6B;QAArF,uBAAA,EAAA,WAAW;QACd,IAAM,GAAG,GAAG,iBAAM,IAAI,YAAC,MAAM,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;QAC9D,OAAO,GAAG,CAAC;IACb,CAAC;IACH,uBAAC;AAAD,CAAC,AA3DD,CAAsC,oCAAgB,GA2DrD;AA3DY,4CAAgB","sourcesContent":["import { AmplitudeBrowser } from '@amplitude/analytics-browser';\nimport {\n  AmplitudeSessionReplay,\n  SessionReplayOptions,\n  sessionReplayPlugin,\n  SessionReplayPlugin,\n} from '@amplitude/plugin-session-replay-browser';\nimport {\n  IExperimentClient,\n  ExperimentPluginConfig,\n  ExperimentPlugin,\n  experimentPlugin,\n} from '@amplitude/plugin-experiment-browser';\nimport { BrowserClient, BrowserOptions } from '@amplitude/analytics-core';\nimport { libraryPlugin } from './library';\n\nexport interface UnifiedSharedOptions {\n  serverZone?: 'US' | 'EU';\n  instanceName?: string;\n}\n\nexport type UnifiedOptions = UnifiedSharedOptions & {\n  analytics?: BrowserOptions;\n  sr?: Omit<SessionReplayOptions, keyof UnifiedSharedOptions>;\n  experiment?: Omit<ExperimentPluginConfig, keyof UnifiedSharedOptions>;\n};\n\nexport interface UnifiedClient extends BrowserClient {\n  initAll(apiKey: string, unifiedOptions?: UnifiedOptions): Promise<void>;\n  sr: AmplitudeSessionReplay;\n  experiment: IExperimentClient | undefined;\n}\n\nexport class AmplitudeUnified extends AmplitudeBrowser implements UnifiedClient {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  sr: AmplitudeSessionReplay;\n\n  get experiment(): IExperimentClient | undefined {\n    // Return when init() or initAll() is not called\n    if (this.config === undefined) {\n      return undefined;\n    }\n\n    const expPlugins = this.plugins(ExperimentPlugin);\n    if (expPlugins.length === 0) {\n      this.config.loggerProvider.debug(`${ExperimentPlugin.pluginName} plugin is not found.`);\n      return undefined;\n    } else if (expPlugins.length === 1) {\n      return expPlugins[0].experiment;\n    } else {\n      this.config.loggerProvider.debug(`Multiple instances of ${ExperimentPlugin.pluginName} are found.`);\n      return undefined;\n    }\n  }\n\n  /**\n   * Initialize SDKs with configuration options.\n   *\n   * @param apiKey Amplitude API key.\n   * @param analyticsOptions Analytics configuration options. Refer to {@link https://amplitude.com/docs/sdks/analytics/browser/browser-sdk-2#configure-the-sdk here} for more info.\n   * @param unifiedOptions Shared configuration for all SDKs and for blade SDKs.\n   */\n  async initAll(apiKey: string, unifiedOptions?: UnifiedOptions) {\n    const sharedOptions = {\n      serverZone: unifiedOptions?.serverZone,\n      instanceName: unifiedOptions?.instanceName,\n    };\n\n    super.add(libraryPlugin());\n    await super.init(apiKey, { ...unifiedOptions?.analytics, ...sharedOptions }).promise;\n\n    await super.add(sessionReplayPlugin({ ...unifiedOptions?.sr, ...sharedOptions })).promise;\n\n    await super.add(experimentPlugin({ ...unifiedOptions?.experiment, ...sharedOptions })).promise;\n\n    const srPlugin = this.plugin(SessionReplayPlugin.pluginName);\n    if (srPlugin === undefined) {\n      this.config.loggerProvider.debug(`${SessionReplayPlugin.pluginName} plugin is not found.`);\n    } else {\n      this.sr = (srPlugin as SessionReplayPlugin).sr;\n    }\n  }\n\n  /**\n   * Only analytics SDK is initialized. Use initAll() instead to initialize all blade SDKs.\n   */\n  /* istanbul ignore next */\n  init(apiKey = '', userIdOrOptions?: string | BrowserOptions, maybeOptions?: BrowserOptions) {\n    const res = super.init(apiKey, userIdOrOptions, maybeOptions);\n    return res;\n  }\n}\n"]}