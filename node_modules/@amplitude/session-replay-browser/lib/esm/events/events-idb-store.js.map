{"version":3,"file":"events-idb-store.js","sourceRoot":"","sources":["../../../src/events/events-idb-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { STORAGE_PREFIX, getGlobalScope } from '@amplitude/analytics-core';\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { STORAGE_FAILURE } from '../messages';\nimport { EventType, Events, SendingSequencesReturn } from '../typings/session-replay';\nimport { BaseEventsStore, InstanceArgs as BaseInstanceArgs } from './base-events-store';\nimport { IDBStore, IDBStoreSession, RecordingStatus } from './legacy-idb-types';\n\nexport const currentSequenceKey = 'sessionCurrentSequence';\nexport const sequencesToSendKey = 'sequencesToSend';\nexport const remoteConfigKey = 'remoteConfig';\n\nexport interface SessionReplayDB extends DBSchema {\n  sessionCurrentSequence: {\n    key: number;\n    value: Omit<SendingSequencesReturn<number>, 'sequenceId'>;\n  };\n  sequencesToSend: {\n    key: number;\n    value: Omit<SendingSequencesReturn<number>, 'sequenceId'>;\n    indexes: { sessionId: string | number };\n  };\n}\n\nexport const keyValDatabaseExists = function (): Promise<IDBDatabase | void> {\n  const globalScope = getGlobalScope();\n  return new Promise((resolve, reject) => {\n    if (!globalScope) {\n      return reject(new Error('Global scope not found'));\n    }\n\n    if (!globalScope.indexedDB) {\n      return reject(new Error('Session Replay: cannot find indexedDB'));\n    }\n\n    try {\n      const request = globalScope.indexedDB.open('keyval-store');\n      request.onupgradeneeded = function () {\n        if (request.result.version === 1) {\n          request.result.close();\n          request.transaction && request.transaction.abort();\n          globalScope.indexedDB.deleteDatabase('keyval-store');\n          resolve();\n        }\n      };\n      request.onsuccess = function () {\n        resolve(request.result);\n      };\n      request.onerror = function () {\n        reject(request.error);\n      };\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\nconst batchPromiseAll = async (promiseBatch: Promise<any>[]) => {\n  while (promiseBatch.length > 0) {\n    const chunkSize = 10;\n    const batch = promiseBatch.splice(0, chunkSize);\n    await Promise.all(batch);\n  }\n};\n\nexport const defineObjectStores = (db: IDBPDatabase<SessionReplayDB>) => {\n  let sequencesStore;\n  let currentSequenceStore;\n  if (!db.objectStoreNames.contains(currentSequenceKey)) {\n    currentSequenceStore = db.createObjectStore(currentSequenceKey, {\n      keyPath: 'sessionId',\n    });\n  }\n  if (!db.objectStoreNames.contains(sequencesToSendKey)) {\n    sequencesStore = db.createObjectStore(sequencesToSendKey, {\n      keyPath: 'sequenceId',\n      autoIncrement: true,\n    });\n    sequencesStore.createIndex('sessionId', 'sessionId');\n  }\n  return {\n    sequencesStore,\n    currentSequenceStore,\n  };\n};\n\nexport const createStore = async (dbName: string) => {\n  return await openDB<SessionReplayDB>(dbName, 1, {\n    upgrade: defineObjectStores,\n  });\n};\n\ntype InstanceArgs = {\n  apiKey: string;\n  db: IDBPDatabase<SessionReplayDB>;\n} & BaseInstanceArgs;\n\nexport class SessionReplayEventsIDBStore extends BaseEventsStore<number> {\n  private readonly apiKey: string;\n  private readonly db: IDBPDatabase<SessionReplayDB>;\n\n  constructor(args: InstanceArgs) {\n    super(args);\n    this.apiKey = args.apiKey;\n    this.db = args.db;\n  }\n\n  static async new(\n    type: EventType,\n    args: Omit<InstanceArgs, 'db'>,\n    sessionId?: string | number,\n  ): Promise<SessionReplayEventsIDBStore | undefined> {\n    try {\n      const dbSuffix = type === 'replay' ? '' : `_${type}`;\n      const dbName = `${args.apiKey.substring(0, 10)}_amp_session_replay_events${dbSuffix}`;\n      const db = await createStore(dbName);\n      const eventsIDBStore = new SessionReplayEventsIDBStore({\n        ...args,\n        db,\n      });\n      await eventsIDBStore.transitionFromKeyValStore(sessionId);\n      return eventsIDBStore;\n    } catch (e) {\n      args.loggerProvider.warn(`${STORAGE_FAILURE}: ${e as string}`);\n    }\n    return;\n  }\n\n  async getCurrentSequenceEvents(sessionId?: number) {\n    if (sessionId) {\n      const events = await this.db.get('sessionCurrentSequence', sessionId);\n      if (!events) {\n        return undefined;\n      }\n      return [events];\n    }\n\n    const allEvents = [];\n    for (const events of await this.db.getAll('sessionCurrentSequence')) {\n      allEvents.push(events);\n    }\n\n    return allEvents;\n  }\n\n  getSequencesToSend = async (): Promise<SendingSequencesReturn<number>[] | undefined> => {\n    try {\n      const sequences: SendingSequencesReturn<number>[] = [];\n      let cursor = await this.db.transaction('sequencesToSend').store.openCursor();\n      while (cursor) {\n        const { sessionId, events } = cursor.value;\n        sequences.push({\n          events,\n          sequenceId: cursor.key,\n          sessionId,\n        });\n        cursor = await cursor.continue();\n      }\n\n      return sequences;\n    } catch (e) {\n      this.loggerProvider.warn(`${STORAGE_FAILURE}: ${e as string}`);\n    }\n    return undefined;\n  };\n\n  storeCurrentSequence = async (sessionId: number) => {\n    try {\n      const currentSequenceData = await this.db.get<'sessionCurrentSequence'>(currentSequenceKey, sessionId);\n      if (!currentSequenceData) {\n        return undefined;\n      }\n\n      const sequenceId = await this.db.put<'sequencesToSend'>(sequencesToSendKey, {\n        sessionId: sessionId,\n        events: currentSequenceData.events,\n      });\n\n      await this.db.put<'sessionCurrentSequence'>(currentSequenceKey, {\n        sessionId,\n        events: [],\n      });\n\n      return {\n        ...currentSequenceData,\n        sessionId,\n        sequenceId,\n      };\n    } catch (e) {\n      this.loggerProvider.warn(`${STORAGE_FAILURE}: ${e as string}`);\n    }\n    return undefined;\n  };\n\n  addEventToCurrentSequence = async (sessionId: number, event: string) => {\n    try {\n      const tx = this.db.transaction<'sessionCurrentSequence', 'readwrite'>(currentSequenceKey, 'readwrite');\n      const sequenceEvents = await tx.store.get(sessionId);\n      if (!sequenceEvents) {\n        await tx.store.put({ sessionId, events: [event] });\n        return;\n      }\n      let eventsToSend;\n      if (this.shouldSplitEventsList(sequenceEvents.events, event)) {\n        eventsToSend = sequenceEvents.events;\n        // set store to empty array\n        await tx.store.put({ sessionId, events: [event] });\n      } else {\n        // add event to array\n        const updatedEvents = sequenceEvents.events.concat(event);\n        await tx.store.put({ sessionId, events: updatedEvents });\n      }\n\n      await tx.done;\n      if (!eventsToSend) {\n        return undefined;\n      }\n\n      const sequenceId = await this.storeSendingEvents(sessionId, eventsToSend);\n\n      if (!sequenceId) {\n        return undefined;\n      }\n\n      return {\n        events: eventsToSend,\n        sessionId,\n        sequenceId,\n      };\n    } catch (e) {\n      this.loggerProvider.warn(`${STORAGE_FAILURE}: ${e as string}`);\n    }\n    return undefined;\n  };\n\n  storeSendingEvents = async (sessionId: number, events: Events) => {\n    try {\n      const sequenceId = await this.db.put<'sequencesToSend'>(sequencesToSendKey, {\n        sessionId: sessionId,\n        events: events,\n      });\n      return sequenceId;\n    } catch (e) {\n      this.loggerProvider.warn(`${STORAGE_FAILURE}: ${e as string}`);\n    }\n    return undefined;\n  };\n\n  cleanUpSessionEventsStore = async (_sessionId: number, sequenceId?: number) => {\n    if (!sequenceId) {\n      return;\n    }\n    try {\n      await this.db.delete<'sequencesToSend'>(sequencesToSendKey, sequenceId);\n    } catch (e) {\n      this.loggerProvider.warn(`${STORAGE_FAILURE}: ${e as string}`);\n    }\n  };\n\n  transitionFromKeyValStore = async (sessionId?: string | number) => {\n    try {\n      const keyValDb = await keyValDatabaseExists();\n      if (!keyValDb) {\n        return;\n      }\n\n      const transitionCurrentSessionSequences = async (numericSessionId: number, sessionStore: IDBStoreSession) => {\n        const currentSessionSequences = sessionStore.sessionSequences;\n        const promisesToBatch: Promise<number | SendingSequencesReturn<number> | undefined>[] = [];\n\n        Object.keys(currentSessionSequences).forEach((sequenceId) => {\n          const numericSequenceId = parseInt(sequenceId, 10);\n          const sequence = currentSessionSequences[numericSequenceId];\n          if (numericSequenceId === sessionStore.currentSequenceId) {\n            const eventAddPromises: Promise<SendingSequencesReturn<number> | undefined>[] = sequence.events.map(\n              async (event) => this.addEventToCurrentSequence(numericSessionId, event),\n            );\n            promisesToBatch.push(...eventAddPromises);\n          } else if (sequence.status !== RecordingStatus.SENT) {\n            promisesToBatch.push(this.storeSendingEvents(numericSessionId, sequence.events));\n          }\n        });\n\n        await batchPromiseAll(promisesToBatch);\n      };\n\n      const storageKey = `${STORAGE_PREFIX}_${this.apiKey.substring(0, 10)}`;\n      try {\n        const getAllRequest = keyValDb.transaction('keyval').objectStore('keyval').getAll(storageKey);\n        const transitionPromise = new Promise<void>((resolve) => {\n          getAllRequest.onsuccess = async (e) => {\n            const storedReplaySessionContextList = e && ((e.target as IDBRequest).result as IDBStore[]);\n            const storedReplaySessionContexts = storedReplaySessionContextList && storedReplaySessionContextList[0];\n            if (storedReplaySessionContexts) {\n              const promisesToBatch: Promise<any>[] = [];\n\n              Object.keys(storedReplaySessionContexts).forEach((storedSessionId) => {\n                const numericSessionId = parseInt(storedSessionId, 10);\n                const oldSessionStore = storedReplaySessionContexts[numericSessionId];\n\n                if (sessionId === numericSessionId) {\n                  promisesToBatch.push(transitionCurrentSessionSequences(numericSessionId, oldSessionStore));\n                } else {\n                  const oldSessionSequences = oldSessionStore.sessionSequences;\n                  Object.keys(oldSessionSequences).forEach((sequenceId) => {\n                    const numericSequenceId = parseInt(sequenceId, 10);\n                    if (oldSessionSequences[numericSequenceId].status !== RecordingStatus.SENT) {\n                      promisesToBatch.push(\n                        this.storeSendingEvents(numericSessionId, oldSessionSequences[numericSequenceId].events),\n                      );\n                    }\n                  });\n                }\n              });\n\n              await batchPromiseAll(promisesToBatch);\n            }\n            resolve();\n          };\n        });\n\n        await transitionPromise;\n        const globalScope = getGlobalScope();\n        if (globalScope) {\n          globalScope.indexedDB.deleteDatabase('keyval-store');\n        }\n      } catch (e) {\n        this.loggerProvider.warn(`Failed to transition session replay events from keyval to new store: ${e as string}`);\n      }\n    } catch (e) {\n      this.loggerProvider.warn(\n        `Failed to access keyval store: ${\n          e as string\n        }. For more information, visit: https://www.docs.developers.amplitude.com/session-replay/sdks/standalone/#indexeddb-best-practices`,\n      );\n    }\n  };\n}\n"]}