{"version":3,"file":"events-memory-store.js","sourceRoot":"","sources":["../../../src/events/events-memory-store.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD;IAAyC,uCAAuB;IAAhE;QAAA,qEA6DC;QA5DS,wBAAkB,GAAqE,EAAE,CAAC;QAC1F,eAAS,GAAsC,EAAE,CAAC;QAClD,gBAAU,GAAG,CAAC,CAAC;;IA0DzB,CAAC;IAxDS,kDAAoB,GAA5B,UAA6B,SAA0B;QACrD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;IACjC,CAAC;IAEO,yCAAW,GAAnB,UAAoB,SAA0B;QAC5C,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACrC,IAAM,MAAM,4BAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAC,CAAC;QAC9C,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG,EAAE,SAAS,WAAA,EAAE,MAAM,QAAA,EAAE,CAAC;QAC5D,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QACrC,OAAO,EAAE,UAAU,YAAA,EAAE,MAAM,QAAA,EAAE,SAAS,WAAA,EAAE,CAAC;IAC3C,CAAC;IAEK,gDAAkB,GAAxB;;;gBACE,sBAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,UAAC,EAAmC;4BAAnC,KAAA,aAAmC,EAAlC,UAAU,QAAA,EAAE,UAAqB,EAAnB,SAAS,eAAA,EAAE,MAAM,YAAA;wBAAQ,OAAA,CAAC;4BAC3F,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC;4BAC9B,SAAS,WAAA;4BACT,MAAM,QAAA;yBACP,CAAC;oBAJ0F,CAI1F,CAAC,EAAC;;;KACL;IAEK,kDAAoB,GAA1B,UAA2B,SAA0B;;;gBACnD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;oBAC9B,sBAAO,SAAS,EAAC;iBAClB;gBACD,sBAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAC;;;KACpC;IAEK,uDAAyB,GAA/B,UACE,SAAiB,EACjB,KAAa;;;;gBAEb,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;oBAC9B,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;iBACtC;gBAGD,IAAI,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,EAAE;oBAChE,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;iBAC9C;gBAED,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEtC,sBAAO,cAAc,EAAC;;;KACvB;IAEK,gDAAkB,GAAxB,UAAyB,SAAiB,EAAE,MAAc;;;gBACxD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,SAAS,WAAA,EAAE,MAAM,QAAA,EAAE,CAAC;gBAEjE,sBAAO,IAAI,CAAC,UAAU,EAAE,EAAC;;;KAC1B;IAEK,uDAAyB,GAA/B,UAAgC,UAAkB,EAAE,UAAmB;;;gBACrE,IAAI,UAAU,KAAK,SAAS,EAAE;oBAC5B,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;iBAC5C;;;;KACF;IACH,0BAAC;AAAD,CAAC,AA7DD,CAAyC,eAAe,GA6DvD","sourcesContent":["import { Events, SendingSequencesReturn } from '../typings/session-replay';\nimport { BaseEventsStore } from './base-events-store';\n\nexport class InMemoryEventsStore extends BaseEventsStore<number> {\n  private finalizedSequences: Record<number, { sessionId: string | number; events: string[] }> = {};\n  private sequences: Record<string | number, string[]> = {};\n  private sequenceId = 0;\n\n  private resetCurrentSequence(sessionId: string | number) {\n    this.sequences[sessionId] = [];\n  }\n\n  private addSequence(sessionId: string | number): SendingSequencesReturn<number> {\n    const sequenceId = this.sequenceId++;\n    const events = [...this.sequences[sessionId]];\n    this.finalizedSequences[sequenceId] = { sessionId, events };\n    this.resetCurrentSequence(sessionId);\n    return { sequenceId, events, sessionId };\n  }\n\n  async getSequencesToSend(): Promise<SendingSequencesReturn<number>[] | undefined> {\n    return Object.entries(this.finalizedSequences).map(([sequenceId, { sessionId, events }]) => ({\n      sequenceId: Number(sequenceId),\n      sessionId,\n      events,\n    }));\n  }\n\n  async storeCurrentSequence(sessionId: string | number): Promise<SendingSequencesReturn<number> | undefined> {\n    if (!this.sequences[sessionId]) {\n      return undefined;\n    }\n    return this.addSequence(sessionId);\n  }\n\n  async addEventToCurrentSequence(\n    sessionId: number,\n    event: string,\n  ): Promise<SendingSequencesReturn<number> | undefined> {\n    if (!this.sequences[sessionId]) {\n      this.resetCurrentSequence(sessionId);\n    }\n\n    let sequenceReturn: SendingSequencesReturn<number> | undefined;\n    if (this.shouldSplitEventsList(this.sequences[sessionId], event)) {\n      sequenceReturn = this.addSequence(sessionId);\n    }\n\n    this.sequences[sessionId].push(event);\n\n    return sequenceReturn;\n  }\n\n  async storeSendingEvents(sessionId: number, events: Events): Promise<number | undefined> {\n    this.finalizedSequences[this.sequenceId] = { sessionId, events };\n\n    return this.sequenceId++;\n  }\n\n  async cleanUpSessionEventsStore(_sessionId: number, sequenceId?: number): Promise<void> {\n    if (sequenceId !== undefined) {\n      delete this.finalizedSequences[sequenceId];\n    }\n  }\n}\n"]}