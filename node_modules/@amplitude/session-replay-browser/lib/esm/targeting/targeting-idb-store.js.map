{"version":3,"file":"targeting-idb-store.js","sourceRoot":"","sources":["../../../src/targeting/targeting-idb-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger as ILogger } from '@amplitude/analytics-types';\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\n\nexport const MAX_IDB_STORAGE_LENGTH = 1000 * 60 * 60 * 24 * 2; // 2 days\n\nexport interface SessionReplayTargetingDB extends DBSchema {\n  sessionTargetingMatch: {\n    key: string;\n    value: {\n      sessionId: string;\n      targetingMatch: boolean;\n      lastUpdated: number;\n    };\n  };\n}\n\nexport class TargetingIDBStore {\n  dbs: { [apiKey: string]: IDBPDatabase<SessionReplayTargetingDB> } = {};\n\n  createStore = async (dbName: string) => {\n    return await openDB<SessionReplayTargetingDB>(dbName, 1, {\n      upgrade: (db: IDBPDatabase<SessionReplayTargetingDB>) => {\n        if (!db.objectStoreNames.contains('sessionTargetingMatch')) {\n          db.createObjectStore('sessionTargetingMatch', {\n            keyPath: 'sessionId',\n          });\n        }\n      },\n    });\n  };\n\n  openOrCreateDB = async (apiKey: string) => {\n    if (this.dbs && this.dbs[apiKey]) {\n      return this.dbs[apiKey];\n    }\n    const dbName = `${apiKey.substring(0, 10)}_amp_session_replay_targeting`;\n    const db = await this.createStore(dbName);\n    this.dbs[apiKey] = db;\n    return db;\n  };\n\n  getTargetingMatchForSession = async ({\n    loggerProvider,\n    apiKey,\n    sessionId,\n  }: {\n    loggerProvider: ILogger;\n    apiKey: string;\n    sessionId: string | number;\n  }) => {\n    try {\n      const db = await this.openOrCreateDB(apiKey);\n      const sessionIdStr = String(sessionId);\n      const targetingMatchForSession = await db.get<'sessionTargetingMatch'>('sessionTargetingMatch', sessionIdStr);\n\n      return targetingMatchForSession?.targetingMatch;\n    } catch (e) {\n      loggerProvider.warn(`Failed to get targeting match for session id ${sessionId}: ${e as string}`);\n    }\n    return undefined;\n  };\n\n  storeTargetingMatchForSession = async ({\n    loggerProvider,\n    apiKey,\n    sessionId,\n    targetingMatch,\n  }: {\n    loggerProvider: ILogger;\n    apiKey: string;\n    sessionId: string | number;\n    targetingMatch: boolean;\n  }) => {\n    try {\n      const db = await this.openOrCreateDB(apiKey);\n      const sessionIdStr = String(sessionId);\n      const targetingMatchForSession = await db.put<'sessionTargetingMatch'>('sessionTargetingMatch', {\n        targetingMatch,\n        sessionId: sessionIdStr,\n        lastUpdated: Date.now(),\n      });\n\n      return targetingMatchForSession;\n    } catch (e) {\n      loggerProvider.warn(`Failed to store targeting match for session id ${sessionId}: ${e as string}`);\n    }\n    return undefined;\n  };\n\n  clearStoreOfOldSessions = async ({\n    loggerProvider,\n    apiKey,\n    currentSessionId,\n  }: {\n    loggerProvider: ILogger;\n    apiKey: string;\n    currentSessionId: string | number;\n  }) => {\n    try {\n      const db = await this.openOrCreateDB(apiKey);\n      const currentSessionIdStr = String(currentSessionId);\n      const tx = db.transaction<'sessionTargetingMatch', 'readwrite'>('sessionTargetingMatch', 'readwrite');\n      const allTargetingMatchObjs = await tx.store.getAll();\n      for (let i = 0; i < allTargetingMatchObjs.length; i++) {\n        const targetingMatchObj = allTargetingMatchObjs[i];\n        const amountOfTimeSinceSession = Date.now() - targetingMatchObj.lastUpdated;\n        if (targetingMatchObj.sessionId !== currentSessionIdStr && amountOfTimeSinceSession > MAX_IDB_STORAGE_LENGTH) {\n          await tx.store.delete(targetingMatchObj.sessionId);\n        }\n      }\n      await tx.done;\n    } catch (e) {\n      loggerProvider.warn(`Failed to clear old targeting matches for sessions: ${e as string}`);\n    }\n  };\n}\nexport const targetingIDBStore = new TargetingIDBStore();\n"]}