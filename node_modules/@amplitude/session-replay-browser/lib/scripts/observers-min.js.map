{"version":3,"file":"observers-min.js","sources":["../../../../src/observers.ts"],"sourcesContent":["import { getGlobalScope } from '@amplitude/analytics-core';\n\nexport interface NetworkRequestEvent {\n  timestamp: number;\n  type: 'fetch';\n  method: string;\n  url: string;\n  status?: number;\n  duration?: number;\n  requestHeaders?: Record<string, string>;\n  responseHeaders?: Record<string, string>;\n  error?: {\n    name: string;\n    message: string;\n  };\n}\n\nexport type NetworkEventCallback = (event: NetworkRequestEvent) => void;\n\nexport class NetworkObservers {\n  private fetchObserver: (() => void) | null = null;\n  private eventCallback?: NetworkEventCallback;\n\n  start(eventCallback: NetworkEventCallback) {\n    this.eventCallback = eventCallback;\n    this.observeFetch();\n  }\n\n  stop() {\n    this.fetchObserver?.();\n    this.fetchObserver = null;\n    this.eventCallback = undefined;\n  }\n\n  protected notifyEvent(event: NetworkRequestEvent) {\n    this.eventCallback?.(event);\n  }\n\n  private observeFetch() {\n    const globalScope = getGlobalScope();\n    if (!globalScope) return;\n\n    const originalFetch = globalScope.fetch;\n    if (!originalFetch) return;\n\n    globalScope.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {\n      const startTime = Date.now();\n      const requestEvent: NetworkRequestEvent = {\n        timestamp: startTime,\n        type: 'fetch',\n        method: init?.method || 'GET', // Fetch API defaulted to GET when no method is provided\n        url: input.toString(),\n        requestHeaders: init?.headers as Record<string, string>,\n      };\n\n      try {\n        const response = await originalFetch(input, init);\n        const endTime = Date.now();\n\n        requestEvent.status = response.status;\n        requestEvent.duration = endTime - startTime;\n\n        // Convert Headers\n        const headers: Record<string, string> = {};\n        response.headers.forEach((value, key) => {\n          headers[key] = value;\n        });\n        requestEvent.responseHeaders = headers;\n\n        this.notifyEvent(requestEvent);\n        return response;\n      } catch (error) {\n        const endTime = Date.now();\n        requestEvent.duration = endTime - startTime;\n\n        // Capture error information\n        const typedError = error as Error;\n        requestEvent.error = {\n          name: typedError.name || 'UnknownError',\n          message: typedError.message || 'An unknown error occurred',\n        };\n\n        this.notifyEvent(requestEvent);\n        throw error;\n      }\n    };\n\n    this.fetchObserver = () => {\n      globalScope.fetch = originalFetch;\n    };\n  }\n}\n"],"names":["NetworkObservers","constructor","this","fetchObserver","start","eventCallback","observeFetch","stop","_a","call","undefined","notifyEvent","event","globalScope","getGlobalScope","originalFetch","fetch","input","init","__awaiter","startTime","Date","now","requestEvent","timestamp","type","method","url","toString","requestHeaders","headers","response","endTime","status","duration","forEach","value","key","responseHeaders","error","typedError","name","message"],"mappings":"yFAmBaA,EAAb,WAAAC,GACUC,KAAaC,cAAwB,IAuE9C,CApEC,KAAAC,CAAMC,GACJH,KAAKG,cAAgBA,EACrBH,KAAKI,cACN,CAED,IAAAC,SACoB,QAAlBC,EAAAN,KAAKC,qBAAa,IAAAK,GAAAA,EAAAC,KAAAP,MAClBA,KAAKC,cAAgB,KACrBD,KAAKG,mBAAgBK,CACtB,CAES,WAAAC,CAAYC,SACC,QAArBJ,EAAAN,KAAKG,qBAAgB,IAAAG,GAAAA,EAAAC,KAAAP,KAAAU,EACtB,CAEO,YAAAN,GACN,MAAMO,EAAcC,IACpB,IAAKD,EAAa,OAElB,MAAME,EAAgBF,EAAYG,MAC7BD,IAELF,EAAYG,MAAQ,CAAOC,EAA0BC,IAAsBC,EAAAjB,UAAA,OAAA,GAAA,YACzE,MAAMkB,EAAYC,KAAKC,MACjBC,EAAoC,CACxCC,UAAWJ,EACXK,KAAM,QACNC,QAAQR,eAAAA,EAAMQ,SAAU,MACxBC,IAAKV,EAAMW,WACXC,eAAgBX,aAAA,EAAAA,EAAMY,SAGxB,IACE,MAAMC,QAAiBhB,EAAcE,EAAOC,GACtCc,EAAUX,KAAKC,MAErBC,EAAaU,OAASF,EAASE,OAC/BV,EAAaW,SAAWF,EAAUZ,EAGlC,MAAMU,EAAkC,CAAA,EAOxC,OANAC,EAASD,QAAQK,SAAQ,CAACC,EAAOC,KAC/BP,EAAQO,GAAOD,CAAK,IAEtBb,EAAae,gBAAkBR,EAE/B5B,KAAKS,YAAYY,GACVQ,CACR,CAAC,MAAOQ,GACP,MAAMP,EAAUX,KAAKC,MACrBC,EAAaW,SAAWF,EAAUZ,EAGlC,MAAMoB,EAAaD,EAOnB,MANAhB,EAAagB,MAAQ,CACnBE,KAAMD,EAAWC,MAAQ,eACzBC,QAASF,EAAWE,SAAW,6BAGjCxC,KAAKS,YAAYY,GACXgB,CACP,CACH,IAEArC,KAAKC,cAAgB,KACnBU,EAAYG,MAAQD,CAAa,EAEpC"}