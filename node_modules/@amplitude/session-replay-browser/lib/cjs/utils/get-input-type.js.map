{"version":3,"file":"get-input-type.js","sourceRoot":"","sources":["../../../src/utils/get-input-type.ts"],"names":[],"mappings":";;;AAAA,SAAgB,WAAW,CAAmB,GAAM;IAClD,OAAO,GAAG,CAAC,WAAW,EAA6B,CAAC;AACtD,CAAC;AAFD,kCAEC;AAED;;;;;GAKG;AACH,SAAgB,YAAY,CAAC,OAAoB;IAC/C,uFAAuF;IACvF,IAAM,IAAI,GAAI,OAA4B,CAAC,IAAI,CAAC;IAEhD,OAAO,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC;QAChD,CAAC,CAAC,UAAU;QACZ,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,4EAA4E;gBAC5E,WAAW,CAAC,IAAI,CAAC;YACnB,CAAC,CAAC,IAAI,CAAC;AACX,CAAC;AAVD,oCAUC","sourcesContent":["export function toLowerCase<T extends string>(str: T): Lowercase<T> {\n  return str.toLowerCase() as unknown as Lowercase<T>;\n}\n\n/**\n * Get the type of an input element.\n * This takes care of the case where a password input is changed to a text input.\n * In this case, we continue to consider this of type password, in order to avoid leaking sensitive data\n * where passwords should be masked.\n */\nexport function getInputType(element: HTMLElement): Lowercase<string> | null {\n  // when omitting the type of input element(e.g. <input />), the type is treated as text\n  const type = (element as HTMLInputElement).type;\n\n  return element.hasAttribute('data-rr-is-password')\n    ? 'password'\n    : type\n    ? // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      toLowerCase(type)\n    : null;\n}\n"]}