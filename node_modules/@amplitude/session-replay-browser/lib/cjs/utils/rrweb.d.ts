import type { eventWithTime, scrollCallback } from '@amplitude/rrweb-types';
export declare function getWindowScroll(win: Window): {
    left: number;
    top: number;
};
export declare function getWindowHeight(): number;
export declare function getWindowWidth(): number;
export type Mirror = {
    getNode: (id: number) => Node | null;
};
export type RecordFunction = {
    (options: {
        emit: (event: eventWithTime) => void;
        inlineStylesheet?: boolean;
        hooks?: {
            mouseInteraction?: any;
            scroll?: scrollCallback;
        };
        maskAllInputs?: boolean;
        maskTextClass?: string;
        blockClass?: string;
        blockSelector?: string;
        maskInputFn?: (text: string, element: HTMLElement | null) => string;
        maskTextFn?: (text: string, element: HTMLElement | null) => string;
        maskTextSelector?: string;
        recordCanvas?: boolean;
        slimDOMOptions?: {
            script?: boolean;
            comment?: boolean;
        };
        errorHandler?: (error: unknown) => boolean;
        plugins?: any[];
        applyBackgroundColorToBlockedElements?: boolean;
    }): (() => void) | undefined;
    addCustomEvent: (eventName: string, eventData: any) => void;
    mirror: Mirror;
};
//# sourceMappingURL=rrweb.d.ts.map