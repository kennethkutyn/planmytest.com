{"version":3,"file":"scroll.js","sourceRoot":"","sources":["../../../src/hooks/scroll.ts"],"names":[],"mappings":"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","sourcesContent":["import { getWindowHeight, getWindowWidth } from '../utils/rrweb';\nimport type { scrollCallback, scrollPosition } from '@amplitude/rrweb-types';\nimport { BeaconTransport } from '../beacon-transport';\nimport { getGlobalScope } from '@amplitude/analytics-core';\nimport { SessionReplayJoinedConfig } from '../config/types';\nimport { SessionReplayDestinationSessionMetadata } from '../typings/session-replay';\nimport { getPageUrl } from '../helpers';\n\nexport type ScrollEvent = {\n  timestamp: number; // Timestamp the event occurred\n  maxScrollX: number; // Max window scroll X on a page\n  maxScrollY: number; // Max window scroll Y on a page\n  maxScrollHeight: number; // Max window scroll Y + window height on a page\n  maxScrollWidth: number; // Max window scroll X + window width on a page\n  viewportWidth: number;\n  viewportHeight: number;\n  pageUrl: string;\n  type: 'scroll';\n};\n\nexport type ScrollEventPayload = { version: number; events: ScrollEvent[] };\n\n/**\n * This is intended to watch and update max scroll activity when loaded for a particular page.\n * A new instance should be created if the page URL changes, since by default it does not reset\n * it's max scroll state. It is intended to send very few and very small events utilizing the\n * Beacon API.\n * @see {@link BeaconTransport} for more details on Beacon API usage.\n */\nexport class ScrollWatcher {\n  private timestamp = Date.now();\n  private _maxScrollX: number;\n  private _maxScrollY: number;\n  private _maxScrollWidth: number;\n  private _maxScrollHeight: number;\n  private readonly transport: BeaconTransport<ScrollEventPayload>;\n  private readonly config: Pick<SessionReplayJoinedConfig, 'loggerProvider' | 'interactionConfig'>;\n\n  static default(\n    context: Omit<SessionReplayDestinationSessionMetadata, 'deviceId'>,\n    config: SessionReplayJoinedConfig,\n  ): ScrollWatcher {\n    return new ScrollWatcher(new BeaconTransport<ScrollEventPayload>(context, config), config);\n  }\n\n  constructor(\n    transport: BeaconTransport<ScrollEventPayload>,\n    config: Pick<SessionReplayJoinedConfig, 'loggerProvider' | 'interactionConfig'>,\n  ) {\n    this._maxScrollX = 0;\n    this._maxScrollY = 0;\n    this._maxScrollWidth = getWindowWidth();\n    this._maxScrollHeight = getWindowHeight();\n    this.config = config;\n\n    this.transport = transport;\n  }\n\n  public get maxScrollX(): number {\n    return this._maxScrollX;\n  }\n\n  public get maxScrollY(): number {\n    return this._maxScrollY;\n  }\n\n  public get maxScrollWidth(): number {\n    return this._maxScrollWidth;\n  }\n\n  public get maxScrollHeight(): number {\n    return this._maxScrollHeight;\n  }\n\n  update(e: scrollPosition) {\n    const now = Date.now();\n    if (e.x > this._maxScrollX) {\n      const width = getWindowWidth();\n      this._maxScrollX = e.x;\n      const maxScrollWidth = e.x + width;\n      if (maxScrollWidth > this._maxScrollWidth) {\n        this._maxScrollWidth = maxScrollWidth;\n      }\n      this.timestamp = now;\n    }\n\n    if (e.y > this._maxScrollY) {\n      const height = getWindowHeight();\n      this._maxScrollY = e.y;\n      const maxScrollHeight = e.y + height;\n      if (maxScrollHeight > this._maxScrollHeight) {\n        this._maxScrollHeight = maxScrollHeight;\n      }\n      this.timestamp = now;\n    }\n  }\n\n  hook: scrollCallback = (e: scrollPosition) => {\n    this.update(e);\n  };\n\n  send: (deviceIdFn: () => string | undefined) => (_: PageTransitionEvent | Event) => void = (deviceIdFn) => (_) => {\n    const deviceId = deviceIdFn();\n    const globalScope = getGlobalScope();\n    if (globalScope && deviceId) {\n      this.transport.send(deviceId, {\n        version: 1,\n        events: [\n          {\n            maxScrollX: this._maxScrollX,\n            maxScrollY: this._maxScrollY,\n            maxScrollWidth: this._maxScrollWidth,\n            maxScrollHeight: this._maxScrollHeight,\n\n            viewportHeight: getWindowHeight(),\n            viewportWidth: getWindowWidth(),\n            pageUrl: getPageUrl(globalScope.location.href, this.config.interactionConfig?.ugcFilterRules ?? []),\n            timestamp: this.timestamp,\n            type: 'scroll',\n          },\n        ],\n      });\n    }\n  };\n}\n"]}