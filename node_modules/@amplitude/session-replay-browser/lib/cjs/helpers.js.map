{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalScope, ServerZone } from '@amplitude/analytics-core';\nimport { DEFAULT_MASK_LEVEL, MaskLevel, PrivacyConfig, SessionReplayJoinedConfig, UGCFilterRule } from './config/types';\nimport {\n  KB_SIZE,\n  MASK_TEXT_CLASS,\n  SESSION_REPLAY_EU_URL,\n  SESSION_REPLAY_SERVER_URL,\n  SESSION_REPLAY_STAGING_URL,\n  UNMASK_TEXT_CLASS,\n} from './constants';\nimport { StorageData } from './typings/session-replay';\nimport { getInputType } from './utils/get-input-type';\n\ntype ChromeStorageEstimate = {\n  quota?: number;\n  usage?: number;\n  usageDetails?: { [key: string]: number };\n};\n\n/**\n * Light: Subset of inputs\n * Medium: All inputs\n * Conservative: All inputs and all texts\n */\nconst isMaskedForLevel = (elementType: 'input' | 'text', level: MaskLevel, element: HTMLElement | null): boolean => {\n  switch (level) {\n    case 'light': {\n      if (elementType !== 'input') {\n        return true;\n      }\n\n      const inputType = element ? getInputType(element) : '';\n      /* istanbul ignore if */ // TODO(lew): For some reason it's impossible to test this.\n      if (!inputType) {\n        return false;\n      }\n\n      if (['password', 'hidden', 'email', 'tel'].includes(inputType)) {\n        return true;\n      }\n\n      if ((element as HTMLInputElement).autocomplete.startsWith('cc-')) {\n        return true;\n      }\n\n      return false;\n    }\n    case 'medium':\n    case 'conservative':\n      return true;\n    default:\n      return isMaskedForLevel(elementType, DEFAULT_MASK_LEVEL, element);\n  }\n};\n\n/**\n * Checks if the given element set to be masked by rrweb\n *\n * Priority is:\n *  1. [In code] Element/class based masking/unmasking <> [Config based] Selector based masking/unmasking\n *  2. Use app defaults\n */\nconst isMasked = (\n  elementType: 'input' | 'text',\n  config: PrivacyConfig = { defaultMaskLevel: DEFAULT_MASK_LEVEL },\n  element: HTMLElement | null,\n): boolean => {\n  if (element) {\n    // Element or parent is explicitly instrumented in code to mask\n    if (element.closest('.' + MASK_TEXT_CLASS)) {\n      return true;\n    }\n\n    // Config has override for mask\n    const shouldMask = (config.maskSelector ?? []).some((selector) => element.closest(selector));\n    if (shouldMask) {\n      return true;\n    }\n\n    // Code or config has override to unmask\n    if (element.closest('.' + UNMASK_TEXT_CLASS)) {\n      return false;\n    }\n\n    // Here we are probably sent an element, but we want to match if they have a\n    // parent with an unmask selector.\n    const shouldUnmask = (config.unmaskSelector ?? []).some((selector) => element.closest(selector));\n    if (shouldUnmask) {\n      return false;\n    }\n  }\n\n  return isMaskedForLevel(elementType, config.defaultMaskLevel ?? DEFAULT_MASK_LEVEL, element);\n};\n\nexport const maskFn =\n  (elementType: 'text' | 'input', config?: PrivacyConfig) =>\n  (text: string, element: HTMLElement | null): string => {\n    return isMasked(elementType, config, element) ? text.replace(/[^\\s]/g, '*') : text;\n  };\n\nexport const generateHashCode = function (str: string) {\n  let hash = 0;\n  if (str.length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    const chr = str.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0;\n  }\n  return hash;\n};\n\nexport const isSessionInSample = function (sessionId: string | number, sampleRate: number) {\n  const hashNumber = generateHashCode(sessionId.toString());\n  const absHash = Math.abs(hashNumber);\n  const absHashMultiply = absHash * 31;\n  const mod = absHashMultiply % 1000000;\n  return mod / 1000000 < sampleRate;\n};\n\nexport const getCurrentUrl = () => {\n  const globalScope = getGlobalScope();\n  return globalScope?.location ? globalScope.location.href : '';\n};\n\nexport const generateSessionReplayId = (sessionId: string | number, deviceId: string): string => {\n  return `${deviceId}/${sessionId}`;\n};\n\nexport const getServerUrl = (serverZone?: keyof typeof ServerZone, trackServerUrl?: string): string => {\n  if (trackServerUrl) {\n    return trackServerUrl;\n  }\n\n  if (serverZone === ServerZone.STAGING) {\n    return SESSION_REPLAY_STAGING_URL;\n  }\n\n  if (serverZone === ServerZone.EU) {\n    return SESSION_REPLAY_EU_URL;\n  }\n\n  return SESSION_REPLAY_SERVER_URL;\n};\n\nconst isValidGlobUrl = (globUrl: string): boolean => {\n  if (typeof globUrl !== 'string' || globUrl.trim() === '') return false;\n  const urlPattern = /^\\/|^https?:\\/\\/[^\\s]+$/;\n  if (!urlPattern.test(globUrl)) return false;\n  return true;\n};\n\nconst globToRegex = (glob: string): RegExp => {\n  // Escape special regex characters, then convert globs\n  const escaped = glob\n    .replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&') // Escape regex specials\n    .replace(/\\*/g, '.*') // Convert * to .*\n    .replace(/\\?/g, '.'); // Convert ? to .\n\n  return new RegExp(`^${escaped}$`);\n};\n\nexport const validateUGCFilterRules = (ugcFilterRules: UGCFilterRule[]) => {\n  // validate ugcFilterRules\n  if (!ugcFilterRules.every((rule) => typeof rule.selector === 'string' && typeof rule.replacement === 'string')) {\n    throw new Error('ugcFilterRules must be an array of objects with selector and replacement properties');\n  }\n\n  // validate ugcFilterRules are valid globs\n  if (!ugcFilterRules.every((rule) => isValidGlobUrl(rule.selector))) {\n    throw new Error('ugcFilterRules must be an array of objects with valid globs');\n  }\n};\n\nexport const getPageUrl = (pageUrl: string, ugcFilterRules: UGCFilterRule[]) => {\n  // apply ugcFilterRules, order is important, first rule wins\n  for (const rule of ugcFilterRules) {\n    const regex = globToRegex(rule.selector);\n\n    if (regex.test(pageUrl)) {\n      return pageUrl.replace(regex, rule.replacement);\n    }\n  }\n\n  return pageUrl;\n};\n\nexport const getStorageSize = async (): Promise<StorageData> => {\n  try {\n    const globalScope = getGlobalScope();\n    if (globalScope) {\n      const { usage, quota, usageDetails }: ChromeStorageEstimate = await globalScope.navigator.storage.estimate();\n      const totalStorageSize = usage ? Math.round(usage / KB_SIZE) : 0;\n      const percentOfQuota = usage && quota ? Math.round((usage / quota + Number.EPSILON) * 1000) / 1000 : 0;\n      return { totalStorageSize, percentOfQuota, usageDetails: JSON.stringify(usageDetails) };\n    }\n  } catch (e) {\n    // swallow\n  }\n  return { totalStorageSize: 0, percentOfQuota: 0, usageDetails: '' };\n};\n\nexport const getDebugConfig = (config: SessionReplayJoinedConfig) => {\n  const debugConfig = {\n    ...config,\n  };\n  const { apiKey } = debugConfig;\n  debugConfig.apiKey = `****${apiKey.substring(apiKey.length - 4)}`;\n  return debugConfig;\n};\n"]}