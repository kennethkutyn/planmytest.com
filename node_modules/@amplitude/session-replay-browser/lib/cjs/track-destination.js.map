{"version":3,"file":"track-destination.js","sourceRoot":"","sources":["../../src/track-destination.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseTransport, ILogger, Status } from '@amplitude/analytics-core';\nimport { getCurrentUrl, getServerUrl } from './helpers';\nimport {\n  MAX_RETRIES_EXCEEDED_MESSAGE,\n  MISSING_API_KEY_MESSAGE,\n  MISSING_DEVICE_ID_MESSAGE,\n  UNEXPECTED_ERROR_MESSAGE,\n  UNEXPECTED_NETWORK_ERROR_MESSAGE,\n} from './messages';\nimport {\n  SessionReplayTrackDestination as AmplitudeSessionReplayTrackDestination,\n  SessionReplayDestination,\n  SessionReplayDestinationContext,\n} from './typings/session-replay';\nimport { VERSION } from './version';\nimport { MAX_URL_LENGTH, KB_SIZE } from './constants';\n\nexport type PayloadBatcher = ({ version, events }: { version: number; events: string[] }) => {\n  version: number;\n  events: unknown[];\n};\n\nexport class SessionReplayTrackDestination implements AmplitudeSessionReplayTrackDestination {\n  loggerProvider: ILogger;\n  storageKey = '';\n  trackServerUrl?: string;\n  retryTimeout = 1000;\n  private scheduled: ReturnType<typeof setTimeout> | null = null;\n  payloadBatcher: PayloadBatcher;\n  queue: SessionReplayDestinationContext[] = [];\n\n  constructor({\n    trackServerUrl,\n    loggerProvider,\n    payloadBatcher,\n  }: {\n    trackServerUrl?: string;\n    loggerProvider: ILogger;\n    payloadBatcher?: PayloadBatcher;\n  }) {\n    this.loggerProvider = loggerProvider;\n    this.payloadBatcher = payloadBatcher ? payloadBatcher : (payload) => payload;\n    this.trackServerUrl = trackServerUrl;\n  }\n\n  sendEventsList(destinationData: SessionReplayDestination) {\n    this.addToQueue({\n      ...destinationData,\n      attempts: 0,\n      timeout: 0,\n    });\n  }\n\n  addToQueue(...list: SessionReplayDestinationContext[]) {\n    const tryable = list.filter((context) => {\n      if (context.attempts < (context.flushMaxRetries || 0)) {\n        context.attempts += 1;\n        return true;\n      }\n      this.completeRequest({\n        context,\n        err: MAX_RETRIES_EXCEEDED_MESSAGE,\n      });\n      return false;\n    });\n    tryable.forEach((context) => {\n      this.queue = this.queue.concat(context);\n      if (context.timeout === 0) {\n        this.schedule(0);\n        return;\n      }\n\n      setTimeout(() => {\n        context.timeout = 0;\n        this.schedule(0);\n      }, context.timeout);\n    });\n  }\n\n  schedule(timeout: number) {\n    if (this.scheduled) return;\n    this.scheduled = setTimeout(() => {\n      void this.flush(true).then(() => {\n        if (this.queue.length > 0) {\n          this.schedule(timeout);\n        }\n      });\n    }, timeout);\n  }\n\n  async flush(useRetry = false) {\n    const list: SessionReplayDestinationContext[] = [];\n    const later: SessionReplayDestinationContext[] = [];\n    this.queue.forEach((context) => (context.timeout === 0 ? list.push(context) : later.push(context)));\n    this.queue = later;\n\n    if (this.scheduled) {\n      clearTimeout(this.scheduled);\n      this.scheduled = null;\n    }\n\n    await Promise.all(list.map((context) => this.send(context, useRetry)));\n  }\n\n  async send(context: SessionReplayDestinationContext, useRetry = true) {\n    const apiKey = context.apiKey;\n    if (!apiKey) {\n      return this.completeRequest({ context, err: MISSING_API_KEY_MESSAGE });\n    }\n    const deviceId = context.deviceId;\n    if (!deviceId) {\n      return this.completeRequest({ context, err: MISSING_DEVICE_ID_MESSAGE });\n    }\n    const url = getCurrentUrl();\n    const version = VERSION;\n    const sampleRate = context.sampleRate;\n    const urlParams = new URLSearchParams({\n      device_id: deviceId,\n      session_id: `${context.sessionId}`,\n      type: `${context.type}`,\n    });\n    const sessionReplayLibrary = `${context.version?.type || 'standalone'}/${context.version?.version || version}`;\n    const payload = this.payloadBatcher({\n      version: 1,\n      events: context.events,\n    });\n\n    if (payload.events.length === 0) {\n      this.completeRequest({ context });\n      return;\n    }\n\n    try {\n      const options: RequestInit = {\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: '*/*',\n          Authorization: `Bearer ${apiKey}`,\n          'X-Client-Version': version,\n          'X-Client-Library': sessionReplayLibrary,\n          'X-Client-Url': url.substring(0, MAX_URL_LENGTH), // limit url length to 1000 characters to avoid ELB 400 error\n          'X-Client-Sample-Rate': `${sampleRate}`,\n        },\n        body: JSON.stringify(payload),\n        method: 'POST',\n      };\n\n      const serverUrl = `${getServerUrl(context.serverZone, this.trackServerUrl)}?${urlParams.toString()}`;\n      const res = await fetch(serverUrl, options);\n      if (res === null) {\n        this.completeRequest({ context, err: UNEXPECTED_ERROR_MESSAGE });\n        return;\n      }\n      if (!useRetry) {\n        let responseBody = '';\n        try {\n          responseBody = JSON.stringify(res.body, null, 2);\n        } catch {\n          // to avoid crash, but don't care about the error, add comment to avoid empty block lint error\n        }\n        this.completeRequest({ context, success: `${res.status}: ${responseBody}` });\n      } else {\n        this.handleReponse(res.status, context);\n      }\n    } catch (e) {\n      this.completeRequest({ context, err: e as string });\n    }\n  }\n\n  handleReponse(status: number, context: SessionReplayDestinationContext) {\n    const parsedStatus = new BaseTransport().buildStatus(status);\n    switch (parsedStatus) {\n      case Status.Success:\n        this.handleSuccessResponse(context);\n        break;\n      case Status.Failed:\n        this.handleOtherResponse(context);\n        break;\n      default:\n        this.completeRequest({ context, err: UNEXPECTED_NETWORK_ERROR_MESSAGE });\n    }\n  }\n\n  handleSuccessResponse(context: SessionReplayDestinationContext) {\n    const sizeOfEventsList = Math.round(new Blob(context.events).size / KB_SIZE);\n    this.completeRequest({\n      context,\n      success: `Session replay event batch tracked successfully for session id ${context.sessionId}, size of events: ${sizeOfEventsList} KB`,\n    });\n  }\n\n  handleOtherResponse(context: SessionReplayDestinationContext) {\n    this.addToQueue({\n      ...context,\n      timeout: context.attempts * this.retryTimeout,\n    });\n  }\n\n  completeRequest({\n    context,\n    err,\n    success,\n  }: {\n    context: SessionReplayDestinationContext;\n    err?: string;\n    success?: string;\n  }) {\n    void context.onComplete();\n    if (err) {\n      this.loggerProvider.warn(err);\n    } else if (success) {\n      this.loggerProvider.log(success);\n    }\n  }\n}\n"]}