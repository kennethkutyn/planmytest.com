{"version":3,"file":"targeting-manager.js","sourceRoot":"","sources":["../../../src/targeting/targeting-manager.ts"],"names":[],"mappings":";;;;AAGA,6DAA0D;AAEnD,IAAM,yBAAyB,GAAG,UAAO,EAY/C;QAXC,SAAS,eAAA,EACT,eAAe,qBAAA,EACf,cAAc,oBAAA,EACd,MAAM,YAAA,EACN,eAAe,qBAAA;;;;;wBAQf,qBAAM,uCAAiB,CAAC,uBAAuB,CAAC;wBAC9C,cAAc,EAAE,cAAc;wBAC9B,MAAM,EAAE,MAAM;wBACd,gBAAgB,EAAE,SAAS;qBAC5B,CAAC,EAAA;;oBAJF,SAIE,CAAC;oBAEuB,qBAAM,uCAAiB,CAAC,2BAA2B,CAAC;4BAC5E,cAAc,EAAE,cAAc;4BAC9B,MAAM,EAAE,MAAM;4BACd,SAAS,EAAE,SAAS;yBACrB,CAAC,EAAA;;oBAJI,iBAAiB,GAAG,SAIxB;oBACF,IAAI,iBAAiB,KAAK,IAAI,EAAE;wBAC9B,sBAAO,IAAI,EAAC;qBACb;oBAKG,qBAAqB,GAAG,IAAI,CAAC;;;;oBAGyB,8FAAa,sBAAsB,QAAC;;oBAAjE,wBAAwB,GAAK,CAAA,SAAoC,CAAA,kBAAzC;oBAE3B,qBAAM,wBAAwB,uCACjD,eAAe,KAClB,IAAI,EAAE,eAAe,EACrB,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,MAAM,EACd,cAAc,EAAE,cAAc,IAC9B,EAAA;;oBANI,eAAe,GAAG,SAMtB;oBACF,IAAI,eAAe,IAAI,eAAe,CAAC,mBAAmB,EAAE;wBAC1D,qBAAqB,GAAG,eAAe,CAAC,mBAAmB,CAAC,GAAG,KAAK,IAAI,CAAC;qBAC1E;oBAED,KAAK,uCAAiB,CAAC,6BAA6B,CAAC;wBACnD,cAAc,EAAE,cAAc;wBAC9B,MAAM,EAAE,MAAM;wBACd,SAAS,EAAE,SAAS;wBACpB,cAAc,EAAE,qBAAqB;qBACtC,CAAC,CAAC;;;;oBAEG,UAAU,GAAG,KAAY,CAAC;oBAChC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;;wBAE1C,sBAAO,qBAAqB,EAAC;;;;CAC9B,CAAC;AA1DW,QAAA,yBAAyB,6BA0DpC","sourcesContent":["import type { TargetingParameters } from '@amplitude/targeting';\nimport { TargetingConfig } from '../config/types';\nimport { Logger } from '@amplitude/analytics-types';\nimport { targetingIDBStore } from './targeting-idb-store';\n\nexport const evaluateTargetingAndStore = async ({\n  sessionId,\n  targetingConfig,\n  loggerProvider,\n  apiKey,\n  targetingParams,\n}: {\n  sessionId: string | number;\n  targetingConfig: TargetingConfig;\n  loggerProvider: Logger;\n  apiKey: string;\n  targetingParams?: Pick<TargetingParameters, 'event' | 'userProperties'>;\n}) => {\n  await targetingIDBStore.clearStoreOfOldSessions({\n    loggerProvider: loggerProvider,\n    apiKey: apiKey,\n    currentSessionId: sessionId,\n  });\n\n  const idbTargetingMatch = await targetingIDBStore.getTargetingMatchForSession({\n    loggerProvider: loggerProvider,\n    apiKey: apiKey,\n    sessionId: sessionId,\n  });\n  if (idbTargetingMatch === true) {\n    return true;\n  }\n\n  // If the targeting config is undefined or an empty object,\n  // assume the response was valid but no conditions were set,\n  // so all users match targeting\n  let sessionTargetingMatch = true;\n  try {\n    // Dynamic import of the targeting package\n    const { evaluateTargeting: evaluateTargetingPackage } = await import('@amplitude/targeting');\n\n    const targetingResult = await evaluateTargetingPackage({\n      ...targetingParams,\n      flag: targetingConfig,\n      sessionId: sessionId,\n      apiKey: apiKey,\n      loggerProvider: loggerProvider,\n    });\n    if (targetingResult && targetingResult.sr_targeting_config) {\n      sessionTargetingMatch = targetingResult.sr_targeting_config.key === 'on';\n    }\n\n    void targetingIDBStore.storeTargetingMatchForSession({\n      loggerProvider: loggerProvider,\n      apiKey: apiKey,\n      sessionId: sessionId,\n      targetingMatch: sessionTargetingMatch,\n    });\n  } catch (err: unknown) {\n    const knownError = err as Error;\n    loggerProvider.warn(knownError.message);\n  }\n  return sessionTargetingMatch;\n};\n"]}