{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/logger.ts"],"names":[],"mappings":";;;AAEA;IAQE,4BAAY,cAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;QAC7B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAEO,0CAAa,GAArB,UAA+C,MAAS;;QACtD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,CAAC;gBACN,0BAA0B;YAC5B,CAAC,CAAe,CAAC;SAClB;QAED,IAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;YAC5B,IAAM,UAAU,GAAG,MAAC,EAA0C,CAAC,kBAAkB,mCAAI,EAAE,CAAC;YACxF,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAe,CAAC;SACnD;QAED,OAAO,CAAC;YACN,0BAA0B;QAC5B,CAAC,CAAe,CAAC;IACnB,CAAC;IAED,mCAAM,GAAN,UAAO,QAAkB;QACvB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED,oCAAO,GAAP;QACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IACH,yBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,gDAAkB","sourcesContent":["import { ILogger, LogLevel } from '@amplitude/analytics-core';\n\nexport class SafeLoggerProvider implements ILogger {\n  private logger: ILogger;\n\n  log: typeof console.log;\n  warn: typeof console.warn;\n  error: typeof console.error;\n  debug: typeof console.debug;\n\n  constructor(loggerProvider: ILogger) {\n    this.logger = loggerProvider;\n    this.log = this.getSafeMethod('log');\n    this.warn = this.getSafeMethod('warn');\n    this.error = this.getSafeMethod('error');\n    this.debug = this.getSafeMethod('debug');\n  }\n\n  private getSafeMethod<K extends keyof ILogger>(method: K): ILogger[K] {\n    if (!this.logger) {\n      return (() => {\n        // No-op function fallback\n      }) as ILogger[K];\n    }\n\n    const fn = this.logger[method];\n    if (typeof fn === 'function') {\n      const originalFn = (fn as { __rrweb_original__?: ILogger[K] }).__rrweb_original__ ?? fn;\n      return originalFn.bind(this.logger) as ILogger[K];\n    }\n\n    return (() => {\n      // No-op function fallback\n    }) as ILogger[K];\n  }\n\n  enable(logLevel: LogLevel) {\n    this.logger.enable(logLevel);\n  }\n\n  disable() {\n    this.logger.disable();\n  }\n}\n"]}