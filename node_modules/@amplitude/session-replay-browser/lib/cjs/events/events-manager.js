"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEventsManager = void 0;
var tslib_1 = require("tslib");
var helpers_1 = require("../helpers");
var track_destination_1 = require("../track-destination");
var events_idb_store_1 = require("./events-idb-store");
var events_memory_store_1 = require("./events-memory-store");
var createEventsManager = function (_a) {
    var config = _a.config, sessionId = _a.sessionId, minInterval = _a.minInterval, maxInterval = _a.maxInterval, type = _a.type, payloadBatcher = _a.payloadBatcher, storeType = _a.storeType;
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        function flush(useRetry) {
            if (useRetry === void 0) { useRetry = false; }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    return [2 /*return*/, trackDestination.flush(useRetry)];
                });
            });
        }
        var trackDestination, getMemoryStore, getIdbStoreOrFallback, store, _b, sendEventsList, sendCurrentSequenceEvents, sendStoredEvents, addEvent;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    trackDestination = new track_destination_1.SessionReplayTrackDestination(tslib_1.__assign(tslib_1.__assign({}, config), { loggerProvider: config.loggerProvider, payloadBatcher: payloadBatcher }));
                    getMemoryStore = function () {
                        return new events_memory_store_1.InMemoryEventsStore({
                            loggerProvider: config.loggerProvider,
                            maxInterval: maxInterval,
                            minInterval: minInterval,
                        });
                    };
                    getIdbStoreOrFallback = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        var store;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, events_idb_store_1.SessionReplayEventsIDBStore.new(type, {
                                        loggerProvider: config.loggerProvider,
                                        minInterval: minInterval,
                                        maxInterval: maxInterval,
                                        apiKey: config.apiKey,
                                    }, sessionId)];
                                case 1:
                                    store = _a.sent();
                                    config.loggerProvider.log('Failed to initialize idb store, falling back to memory store.');
                                    return [2 /*return*/, store !== null && store !== void 0 ? store : getMemoryStore()];
                            }
                        });
                    }); };
                    if (!(storeType === 'idb')) return [3 /*break*/, 2];
                    return [4 /*yield*/, getIdbStoreOrFallback()];
                case 1:
                    _b = _c.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _b = getMemoryStore();
                    _c.label = 3;
                case 3:
                    store = _b;
                    sendEventsList = function (_a) {
                        var events = _a.events, sessionId = _a.sessionId, deviceId = _a.deviceId, sequenceId = _a.sequenceId;
                        if (config.debugMode) {
                            (0, helpers_1.getStorageSize)()
                                .then(function (_a) {
                                var totalStorageSize = _a.totalStorageSize, percentOfQuota = _a.percentOfQuota, usageDetails = _a.usageDetails;
                                config.loggerProvider.debug("Total storage size: ".concat(totalStorageSize, " KB, percentage of quota: ").concat(percentOfQuota, "%, usage details: ").concat(usageDetails));
                            })
                                .catch(function () {
                                // swallow error
                            });
                        }
                        trackDestination.sendEventsList({
                            events: events,
                            sessionId: sessionId,
                            flushMaxRetries: config.flushMaxRetries,
                            apiKey: config.apiKey,
                            deviceId: deviceId,
                            sampleRate: config.sampleRate,
                            serverZone: config.serverZone,
                            version: config.version,
                            type: type,
                            onComplete: function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, store.cleanUpSessionEventsStore(sessionId, sequenceId)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); },
                        });
                    };
                    sendCurrentSequenceEvents = function (_a) {
                        var sessionId = _a.sessionId, deviceId = _a.deviceId;
                        store
                            .storeCurrentSequence(sessionId)
                            .then(function (currentSequence) {
                            if (currentSequence) {
                                sendEventsList({
                                    sequenceId: currentSequence.sequenceId,
                                    events: currentSequence.events,
                                    sessionId: currentSequence.sessionId,
                                    deviceId: deviceId,
                                });
                            }
                        })
                            .catch(function (e) {
                            config.loggerProvider.warn('Failed to get current sequence of session replay events for session:', e);
                        });
                    };
                    sendStoredEvents = function (_a) {
                        var deviceId = _a.deviceId;
                        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            var sequencesToSend;
                            return tslib_1.__generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4 /*yield*/, store.getSequencesToSend()];
                                    case 1:
                                        sequencesToSend = _b.sent();
                                        sequencesToSend &&
                                            sequencesToSend.forEach(function (sequence) {
                                                sendEventsList({
                                                    sequenceId: sequence.sequenceId,
                                                    events: sequence.events,
                                                    sessionId: sequence.sessionId,
                                                    deviceId: deviceId,
                                                });
                                            });
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                    addEvent = function (_a) {
                        var event = _a.event, sessionId = _a.sessionId, deviceId = _a.deviceId;
                        store
                            .addEventToCurrentSequence(sessionId, event.data)
                            .then(function (sequenceToSend) {
                            return (sequenceToSend &&
                                sendEventsList({
                                    sequenceId: sequenceToSend.sequenceId,
                                    events: sequenceToSend.events,
                                    sessionId: sequenceToSend.sessionId,
                                    deviceId: deviceId,
                                }));
                        })
                            .catch(function (e) {
                            config.loggerProvider.warn('Failed to add event to session replay capture:', e);
                        });
                    };
                    return [2 /*return*/, {
                            sendCurrentSequenceEvents: sendCurrentSequenceEvents,
                            addEvent: addEvent,
                            sendStoredEvents: sendStoredEvents,
                            flush: flush,
                        }];
            }
        });
    });
};
exports.createEventsManager = createEventsManager;
//# sourceMappingURL=events-manager.js.map