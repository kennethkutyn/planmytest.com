{"version":3,"file":"events-manager.js","sourceRoot":"","sources":["../../../src/events/events-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SessionReplayEventsManager as AmplitudeSessionReplayEventsManager,\n  EventsStore,\n  EventType,\n  StoreType,\n} from '../typings/session-replay';\n\nimport { SessionReplayJoinedConfig } from '../config/types';\nimport { getStorageSize } from '../helpers';\nimport { PayloadBatcher, SessionReplayTrackDestination } from '../track-destination';\nimport { SessionReplayEventsIDBStore } from './events-idb-store';\nimport { InMemoryEventsStore } from './events-memory-store';\n\nexport const createEventsManager = async <Type extends EventType>({\n  config,\n  sessionId,\n  minInterval,\n  maxInterval,\n  type,\n  payloadBatcher,\n  storeType,\n}: {\n  config: SessionReplayJoinedConfig;\n  type: Type;\n  minInterval?: number;\n  maxInterval?: number;\n  sessionId?: string | number;\n  payloadBatcher?: PayloadBatcher;\n  storeType: StoreType;\n}): Promise<AmplitudeSessionReplayEventsManager<Type, string>> => {\n  const trackDestination = new SessionReplayTrackDestination({\n    ...config,\n    loggerProvider: config.loggerProvider,\n    payloadBatcher,\n  });\n\n  const getMemoryStore = (): EventsStore<number> => {\n    return new InMemoryEventsStore({\n      loggerProvider: config.loggerProvider,\n      maxInterval,\n      minInterval,\n    });\n  };\n\n  const getIdbStoreOrFallback = async (): Promise<EventsStore<number>> => {\n    const store = await SessionReplayEventsIDBStore.new(\n      type,\n      {\n        loggerProvider: config.loggerProvider,\n        minInterval,\n        maxInterval,\n        apiKey: config.apiKey,\n      },\n      sessionId,\n    );\n    config.loggerProvider.log('Failed to initialize idb store, falling back to memory store.');\n    return store ?? getMemoryStore();\n  };\n\n  const store: EventsStore<number> = storeType === 'idb' ? await getIdbStoreOrFallback() : getMemoryStore();\n\n  /**\n   * Immediately sends events to the track destination.\n   */\n  const sendEventsList = ({\n    events,\n    sessionId,\n    deviceId,\n    sequenceId,\n  }: {\n    events: string[];\n    sessionId: string | number;\n    deviceId: string;\n    sequenceId?: number;\n  }) => {\n    if (config.debugMode) {\n      getStorageSize()\n        .then(({ totalStorageSize, percentOfQuota, usageDetails }) => {\n          config.loggerProvider.debug(\n            `Total storage size: ${totalStorageSize} KB, percentage of quota: ${percentOfQuota}%, usage details: ${usageDetails}`,\n          );\n        })\n        .catch(() => {\n          // swallow error\n        });\n    }\n\n    trackDestination.sendEventsList({\n      events: events,\n      sessionId: sessionId,\n      flushMaxRetries: config.flushMaxRetries,\n      apiKey: config.apiKey,\n      deviceId: deviceId,\n      sampleRate: config.sampleRate,\n      serverZone: config.serverZone,\n      version: config.version,\n      type,\n      onComplete: async () => {\n        await store.cleanUpSessionEventsStore(sessionId, sequenceId);\n        return;\n      },\n    });\n  };\n\n  const sendCurrentSequenceEvents = ({ sessionId, deviceId }: { sessionId: number; deviceId: string }) => {\n    store\n      .storeCurrentSequence(sessionId)\n      .then((currentSequence) => {\n        if (currentSequence) {\n          sendEventsList({\n            sequenceId: currentSequence.sequenceId,\n            events: currentSequence.events,\n            sessionId: currentSequence.sessionId,\n            deviceId,\n          });\n        }\n      })\n      .catch((e) => {\n        config.loggerProvider.warn('Failed to get current sequence of session replay events for session:', e);\n      });\n  };\n\n  const sendStoredEvents = async ({ deviceId }: { deviceId: string }) => {\n    const sequencesToSend = await store.getSequencesToSend();\n    sequencesToSend &&\n      sequencesToSend.forEach((sequence) => {\n        sendEventsList({\n          sequenceId: sequence.sequenceId,\n          events: sequence.events,\n          sessionId: sequence.sessionId,\n          deviceId,\n        });\n      });\n  };\n\n  const addEvent = ({\n    event,\n    sessionId,\n    deviceId,\n  }: {\n    event: { type: Type; data: string };\n    sessionId: number;\n    deviceId: string;\n  }) => {\n    store\n      .addEventToCurrentSequence(sessionId, event.data)\n      .then((sequenceToSend) => {\n        return (\n          sequenceToSend &&\n          sendEventsList({\n            sequenceId: sequenceToSend.sequenceId,\n            events: sequenceToSend.events,\n            sessionId: sequenceToSend.sessionId,\n            deviceId,\n          })\n        );\n      })\n      .catch((e) => {\n        config.loggerProvider.warn('Failed to add event to session replay capture:', e);\n      });\n  };\n\n  async function flush(useRetry = false) {\n    return trackDestination.flush(useRetry);\n  }\n\n  return {\n    sendCurrentSequenceEvents,\n    addEvent,\n    sendStoredEvents,\n    flush,\n  };\n};\n"]}