{"version":3,"file":"multi-manager.js","sourceRoot":"","sources":["../../../src/events/multi-manager.ts"],"names":[],"mappings":";;;;AAKA;;;GAGG;AACH;IAKE;QAAY,kBAA8D;aAA9D,UAA8D,EAA9D,qBAA8D,EAA9D,IAA8D;YAA9D,6BAA8D;;QACxE,IAAM,WAAW,GAAG,IAAI,GAAG,EAA4E,CAAC;QACxG,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC;YACjB,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;IAC9B,CAAC;IAEK,4CAAgB,GAAtB,UAAuB,IAA0B;;;;;;wBACzC,QAAQ,GAAoB,EAAE,CAAC;wBACrC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;4BAC5B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;wBAChD,CAAC,CAAC,CAAC;wBACH,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;wBAA3B,SAA2B,CAAC;;;;;KAC7B;IAED,oCAAQ,GAAR,UAAS,EAQR;;YAPC,SAAS,eAAA,EACT,KAAK,WAAA,EACL,QAAQ,cAAA;QAMR,MAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,0CAAE,QAAQ,CAAC,EAAE,SAAS,WAAA,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,qDAAyB,GAAzB,UAA0B,EAAgE;YAA9D,SAAS,eAAA,EAAE,QAAQ,cAAA;QAC7C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;YAC5B,OAAO,CAAC,yBAAyB,CAAC,EAAE,SAAS,WAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC;IAEK,iCAAK,GAAX,UAAY,QAA8B;;;;;;wBAClC,QAAQ,GAAoB,EAAE,CAAC;wBACrC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;4BAC5B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACzC,CAAC,CAAC,CAAC;wBACH,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;wBAA3B,SAA2B,CAAC;;;;;KAC7B;IACH,wBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,8CAAiB","sourcesContent":["import {\n  SessionReplayEventsManager as AmplitudeSessionReplayEventsManager,\n  EventsManagerWithType,\n} from '../typings/session-replay';\n\n/**\n * \"Registers\" events managers internally. When an event is added this class routes the event to the correct\n * manager. For all send or flush methods this will invoke the event for all registered managers.\n */\nexport class MultiEventManager<EventType, EventDataType>\n  implements AmplitudeSessionReplayEventsManager<EventType, EventDataType>\n{\n  private managers: Map<EventType, AmplitudeSessionReplayEventsManager<EventType, EventDataType>>;\n\n  constructor(...managers: EventsManagerWithType<EventType, EventDataType>[]) {\n    const managersMap = new Map<EventType, AmplitudeSessionReplayEventsManager<EventType, EventDataType>>();\n    managers.forEach((t) => {\n      managersMap.set(t.name, t.manager);\n    });\n    this.managers = managersMap;\n  }\n\n  async sendStoredEvents(opts: { deviceId: string }): Promise<void> {\n    const promises: Promise<void>[] = [];\n    this.managers.forEach((manager) => {\n      promises.push(manager.sendStoredEvents(opts));\n    });\n    await Promise.all(promises);\n  }\n\n  addEvent({\n    sessionId,\n    event,\n    deviceId,\n  }: {\n    sessionId: number;\n    event: { type: EventType; data: EventDataType };\n    deviceId: string;\n  }): void {\n    this.managers.get(event.type)?.addEvent({ sessionId, event, deviceId });\n  }\n\n  sendCurrentSequenceEvents({ sessionId, deviceId }: { sessionId: number; deviceId: string }): void {\n    this.managers.forEach((manager) => {\n      manager.sendCurrentSequenceEvents({ sessionId, deviceId });\n    });\n  }\n\n  async flush(useRetry?: boolean | undefined): Promise<void> {\n    const promises: Promise<void>[] = [];\n    this.managers.forEach((manager) => {\n      promises.push(manager.flush(useRetry));\n    });\n    await Promise.all(promises);\n  }\n}\n"]}