{"version":3,"file":"event-compressor.js","sourceRoot":"","sources":["../../../src/events/event-compressor.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalScope } from '@amplitude/analytics-core';\nimport { pack } from '@amplitude/rrweb-packer';\nimport type { eventWithTime } from '@amplitude/rrweb-types';\nimport { SessionReplayJoinedConfig } from '../config/types';\nimport { SessionReplayEventsManager } from '../typings/session-replay';\n\ninterface TaskQueue {\n  event: eventWithTime;\n  sessionId: string | number;\n}\n\nconst DEFAULT_TIMEOUT = 2000;\nexport class EventCompressor {\n  taskQueue: TaskQueue[] = [];\n  isProcessing = false;\n  eventsManager?: SessionReplayEventsManager<'replay' | 'interaction', string>;\n  config: SessionReplayJoinedConfig;\n  deviceId: string | undefined;\n  canUseIdleCallback: boolean | undefined;\n  timeout: number;\n  worker?: Worker;\n\n  constructor(\n    eventsManager: SessionReplayEventsManager<'replay' | 'interaction', string>,\n    config: SessionReplayJoinedConfig,\n    deviceId: string | undefined,\n    workerScriptInternal?: string, // this is used for unit testing\n  ) {\n    const globalScope = getGlobalScope();\n    this.canUseIdleCallback = globalScope && 'requestIdleCallback' in globalScope;\n    this.eventsManager = eventsManager;\n    this.config = config;\n    this.deviceId = deviceId;\n    this.timeout = config.performanceConfig?.timeout || DEFAULT_TIMEOUT;\n\n    // These two lines will be changed at compile time.\n    const replace: Record<string, string> = {};\n    // This next line is going to be ridiculously hard to cover in unit tests, ignoring.\n    /* istanbul ignore next */\n    const workerScript = replace.COMPRESSION_WEBWORKER_BODY ?? workerScriptInternal;\n    if (this.config.experimental?.useWebWorker && globalScope && globalScope.Worker && workerScript) {\n      config.loggerProvider.log('[Experimental] Enabling web worker for compression');\n\n      const worker = new Worker(URL.createObjectURL(new Blob([workerScript], { type: 'application/javascript' })));\n      worker.onerror = (e) => {\n        config.loggerProvider.error(e);\n      };\n      worker.onmessage = (e) => {\n        const { compressedEvent, sessionId } = e.data as Record<string, string>;\n        this.addCompressedEventToManager(compressedEvent, sessionId);\n      };\n\n      this.worker = worker;\n    }\n  }\n\n  // Schedule processing during idle time\n  public scheduleIdleProcessing(): void {\n    if (!this.isProcessing) {\n      this.isProcessing = true;\n      requestIdleCallback(\n        (idleDeadline) => {\n          this.processQueue(idleDeadline);\n        },\n        { timeout: this.timeout },\n      );\n    }\n  }\n\n  // Add an event to the task queue if idle callback is supported or compress the event directly\n  public enqueueEvent(event: eventWithTime, sessionId: string | number): void {\n    if (this.canUseIdleCallback && this.config.performanceConfig?.enabled) {\n      this.config.loggerProvider.debug('Enqueuing event for processing during idle time.');\n      this.taskQueue.push({ event, sessionId });\n      this.scheduleIdleProcessing();\n    } else {\n      this.config.loggerProvider.debug('Processing event without idle callback.');\n      this.addCompressedEvent(event, sessionId);\n    }\n  }\n\n  // Process the task queue during idle time\n  public processQueue(idleDeadline: IdleDeadline): void {\n    // Process tasks while there's idle time or until the max number of tasks is reached\n    while (this.taskQueue.length > 0 && (idleDeadline.timeRemaining() > 0 || idleDeadline.didTimeout)) {\n      const task = this.taskQueue.shift();\n      if (task) {\n        const { event, sessionId } = task;\n        this.addCompressedEvent(event, sessionId);\n      }\n    }\n\n    // If there are still tasks in the queue, schedule the next idle callback\n    if (this.taskQueue.length > 0) {\n      requestIdleCallback(\n        (idleDeadline) => {\n          this.processQueue(idleDeadline);\n        },\n        { timeout: this.timeout },\n      );\n    } else {\n      this.isProcessing = false;\n    }\n  }\n\n  compressEvent = (event: eventWithTime) => {\n    const packedEvent = pack(event);\n    return JSON.stringify(packedEvent);\n  };\n\n  private addCompressedEventToManager = (compressedEvent: string, sessionId: string | number) => {\n    if (this.eventsManager && this.deviceId) {\n      this.eventsManager.addEvent({\n        event: { type: 'replay', data: compressedEvent },\n        sessionId,\n        deviceId: this.deviceId,\n      });\n    }\n  };\n\n  public addCompressedEvent = (event: eventWithTime, sessionId: string | number) => {\n    if (this.worker) {\n      // This indirectly compresses the event.\n      this.worker.postMessage({ event, sessionId });\n    } else {\n      const compressedEvent = this.compressEvent(event);\n      this.addCompressedEventToManager(compressedEvent, sessionId);\n    }\n  };\n\n  public terminate = () => {\n    this.worker?.terminate();\n  };\n}\n"]}